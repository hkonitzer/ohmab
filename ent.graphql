directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Address implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  """The address addition"""
  addition: String
  street: String
  city: String
  zip: String
  state: String
  country: String
  """The ICU locale identifier of the address, e.g. en_US, de_DE, ..."""
  locale: String!
  """Is this the primary address?"""
  primary: Boolean!
  """Telephone number"""
  telephone: String
  """A comment for this address"""
  comment: String
  business: Business
  timetables: [Timetable!]
}
"""A connection to a list of items."""
type AddressConnection {
  """A list of edges."""
  edges: [AddressEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AddressEdge {
  """The item at the end of the edge."""
  node: Address
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
AddressWhereInput is used for filtering Address objects.
Input was generated by ent.
"""
input AddressWhereInput {
  not: AddressWhereInput
  and: [AddressWhereInput!]
  or: [AddressWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """addition field predicates"""
  addition: String
  additionNEQ: String
  additionIn: [String!]
  additionNotIn: [String!]
  additionGT: String
  additionGTE: String
  additionLT: String
  additionLTE: String
  additionContains: String
  additionHasPrefix: String
  additionHasSuffix: String
  additionIsNil: Boolean
  additionNotNil: Boolean
  additionEqualFold: String
  additionContainsFold: String
  """street field predicates"""
  street: String
  streetNEQ: String
  streetIn: [String!]
  streetNotIn: [String!]
  streetGT: String
  streetGTE: String
  streetLT: String
  streetLTE: String
  streetContains: String
  streetHasPrefix: String
  streetHasSuffix: String
  streetIsNil: Boolean
  streetNotNil: Boolean
  streetEqualFold: String
  streetContainsFold: String
  """city field predicates"""
  city: String
  cityNEQ: String
  cityIn: [String!]
  cityNotIn: [String!]
  cityGT: String
  cityGTE: String
  cityLT: String
  cityLTE: String
  cityContains: String
  cityHasPrefix: String
  cityHasSuffix: String
  cityIsNil: Boolean
  cityNotNil: Boolean
  cityEqualFold: String
  cityContainsFold: String
  """zip field predicates"""
  zip: String
  zipNEQ: String
  zipIn: [String!]
  zipNotIn: [String!]
  zipGT: String
  zipGTE: String
  zipLT: String
  zipLTE: String
  zipContains: String
  zipHasPrefix: String
  zipHasSuffix: String
  zipIsNil: Boolean
  zipNotNil: Boolean
  zipEqualFold: String
  zipContainsFold: String
  """state field predicates"""
  state: String
  stateNEQ: String
  stateIn: [String!]
  stateNotIn: [String!]
  stateGT: String
  stateGTE: String
  stateLT: String
  stateLTE: String
  stateContains: String
  stateHasPrefix: String
  stateHasSuffix: String
  stateIsNil: Boolean
  stateNotNil: Boolean
  stateEqualFold: String
  stateContainsFold: String
  """country field predicates"""
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryIsNil: Boolean
  countryNotNil: Boolean
  countryEqualFold: String
  countryContainsFold: String
  """locale field predicates"""
  locale: String
  localeNEQ: String
  localeIn: [String!]
  localeNotIn: [String!]
  localeGT: String
  localeGTE: String
  localeLT: String
  localeLTE: String
  localeContains: String
  localeHasPrefix: String
  localeHasSuffix: String
  localeEqualFold: String
  localeContainsFold: String
  """primary field predicates"""
  primary: Boolean
  primaryNEQ: Boolean
  """telephone field predicates"""
  telephone: String
  telephoneNEQ: String
  telephoneIn: [String!]
  telephoneNotIn: [String!]
  telephoneGT: String
  telephoneGTE: String
  telephoneLT: String
  telephoneLTE: String
  telephoneContains: String
  telephoneHasPrefix: String
  telephoneHasSuffix: String
  telephoneIsNil: Boolean
  telephoneNotNil: Boolean
  telephoneEqualFold: String
  telephoneContainsFold: String
  """comment field predicates"""
  comment: String
  commentNEQ: String
  commentIn: [String!]
  commentNotIn: [String!]
  commentGT: String
  commentGTE: String
  commentLT: String
  commentLTE: String
  commentContains: String
  commentHasPrefix: String
  commentHasSuffix: String
  commentIsNil: Boolean
  commentNotNil: Boolean
  commentEqualFold: String
  commentContainsFold: String
  """business edge predicates"""
  hasBusiness: Boolean
  hasBusinessWith: [BusinessWhereInput!]
  """timetables edge predicates"""
  hasTimetables: Boolean
  hasTimetablesWith: [TimetableWhereInput!]
}
type AuditLog implements Node {
  id: ID!
  user: String!
  action: String!
  entitySchema: String!
  entityValues: Map
  entityUUID: String
  timestamp: Time!
}
"""A connection to a list of items."""
type AuditLogConnection {
  """A list of edges."""
  edges: [AuditLogEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AuditLogEdge {
  """The item at the end of the edge."""
  node: AuditLog
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for AuditLog connections"""
input AuditLogOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order AuditLogs."""
  field: AuditLogOrderField!
}
"""Properties by which AuditLog connections can be ordered."""
enum AuditLogOrderField {
  timestamp
}
"""
AuditLogWhereInput is used for filtering AuditLog objects.
Input was generated by ent.
"""
input AuditLogWhereInput {
  not: AuditLogWhereInput
  and: [AuditLogWhereInput!]
  or: [AuditLogWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """user field predicates"""
  user: String
  userNEQ: String
  userIn: [String!]
  userNotIn: [String!]
  userGT: String
  userGTE: String
  userLT: String
  userLTE: String
  userContains: String
  userHasPrefix: String
  userHasSuffix: String
  userEqualFold: String
  userContainsFold: String
  """action field predicates"""
  action: String
  actionNEQ: String
  actionIn: [String!]
  actionNotIn: [String!]
  actionGT: String
  actionGTE: String
  actionLT: String
  actionLTE: String
  actionContains: String
  actionHasPrefix: String
  actionHasSuffix: String
  actionEqualFold: String
  actionContainsFold: String
  """entity_schema field predicates"""
  entitySchema: String
  entitySchemaNEQ: String
  entitySchemaIn: [String!]
  entitySchemaNotIn: [String!]
  entitySchemaGT: String
  entitySchemaGTE: String
  entitySchemaLT: String
  entitySchemaLTE: String
  entitySchemaContains: String
  entitySchemaHasPrefix: String
  entitySchemaHasSuffix: String
  entitySchemaEqualFold: String
  entitySchemaContainsFold: String
  """entity_uuid field predicates"""
  entityUUID: String
  entityUUIDNEQ: String
  entityUUIDIn: [String!]
  entityUUIDNotIn: [String!]
  entityUUIDGT: String
  entityUUIDGTE: String
  entityUUIDLT: String
  entityUUIDLTE: String
  entityUUIDContains: String
  entityUUIDHasPrefix: String
  entityUUIDHasSuffix: String
  entityUUIDIsNil: Boolean
  entityUUIDNotNil: Boolean
  entityUUIDEqualFold: String
  entityUUIDContainsFold: String
  """timestamp field predicates"""
  timestamp: Time
  timestampNEQ: Time
  timestampIn: [Time!]
  timestampNotIn: [Time!]
  timestampGT: Time
  timestampGTE: Time
  timestampLT: Time
  timestampLTE: Time
}
type Business implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  """The main name of the business"""
  name1: String!
  """The optional second name of the business"""
  name2: String
  """The unqiue alias of the business (short name)"""
  alias: String!
  """Telephone number"""
  telephone: String
  """Email address (has to be unique)"""
  email: String
  """Website address"""
  website: String
  """A comment for this business"""
  comment: String
  """Is the business active?"""
  active: Boolean!
  addresses: [Address!]
  tags: [Tag!]
  users: [User!]
  operators: [Operator!]
}
"""A connection to a list of items."""
type BusinessConnection {
  """A list of edges."""
  edges: [BusinessEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type BusinessEdge {
  """The item at the end of the edge."""
  node: Business
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Business connections"""
input BusinessOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Businesses."""
  field: BusinessOrderField!
}
"""Properties by which Business connections can be ordered."""
enum BusinessOrderField {
  NAME1
  ALIAS
}
"""
BusinessWhereInput is used for filtering Business objects.
Input was generated by ent.
"""
input BusinessWhereInput {
  not: BusinessWhereInput
  and: [BusinessWhereInput!]
  or: [BusinessWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """name1 field predicates"""
  name1: String
  name1NEQ: String
  name1In: [String!]
  name1NotIn: [String!]
  name1GT: String
  name1GTE: String
  name1LT: String
  name1LTE: String
  name1Contains: String
  name1HasPrefix: String
  name1HasSuffix: String
  name1EqualFold: String
  name1ContainsFold: String
  """name2 field predicates"""
  name2: String
  name2NEQ: String
  name2In: [String!]
  name2NotIn: [String!]
  name2GT: String
  name2GTE: String
  name2LT: String
  name2LTE: String
  name2Contains: String
  name2HasPrefix: String
  name2HasSuffix: String
  name2IsNil: Boolean
  name2NotNil: Boolean
  name2EqualFold: String
  name2ContainsFold: String
  """alias field predicates"""
  alias: String
  aliasNEQ: String
  aliasIn: [String!]
  aliasNotIn: [String!]
  aliasGT: String
  aliasGTE: String
  aliasLT: String
  aliasLTE: String
  aliasContains: String
  aliasHasPrefix: String
  aliasHasSuffix: String
  aliasEqualFold: String
  aliasContainsFold: String
  """telephone field predicates"""
  telephone: String
  telephoneNEQ: String
  telephoneIn: [String!]
  telephoneNotIn: [String!]
  telephoneGT: String
  telephoneGTE: String
  telephoneLT: String
  telephoneLTE: String
  telephoneContains: String
  telephoneHasPrefix: String
  telephoneHasSuffix: String
  telephoneIsNil: Boolean
  telephoneNotNil: Boolean
  telephoneEqualFold: String
  telephoneContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """website field predicates"""
  website: String
  websiteNEQ: String
  websiteIn: [String!]
  websiteNotIn: [String!]
  websiteGT: String
  websiteGTE: String
  websiteLT: String
  websiteLTE: String
  websiteContains: String
  websiteHasPrefix: String
  websiteHasSuffix: String
  websiteIsNil: Boolean
  websiteNotNil: Boolean
  websiteEqualFold: String
  websiteContainsFold: String
  """comment field predicates"""
  comment: String
  commentNEQ: String
  commentIn: [String!]
  commentNotIn: [String!]
  commentGT: String
  commentGTE: String
  commentLT: String
  commentLTE: String
  commentContains: String
  commentHasPrefix: String
  commentHasSuffix: String
  commentIsNil: Boolean
  commentNotNil: Boolean
  commentEqualFold: String
  commentContainsFold: String
  """active field predicates"""
  active: Boolean
  activeNEQ: Boolean
  """addresses edge predicates"""
  hasAddresses: Boolean
  hasAddressesWith: [AddressWhereInput!]
  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """operators edge predicates"""
  hasOperators: Boolean
  hasOperatorsWith: [OperatorWhereInput!]
}
type Content implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  """The type of the timetable entry"""
  timetableType: ContentTimetableType!
  """The type of the content, only HTML is supported at the moment"""
  type: ContentType!
  """The ICU locale identifier for this content, e.g. en_US, de_DE, ..."""
  locale: String!
  location: ContentLocation!
  content: String!
  status: ContentStatus!
  publishedAt: Time
}
"""ContentLocation is enum for the field location"""
enum ContentLocation @goModel(model: "github.com/hkonitzer/ohmab/ent/content.Location") {
  TOP
  BOTTOM
}
"""Ordering options for Content connections"""
input ContentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Contents."""
  field: ContentOrderField!
}
"""Properties by which Content connections can be ordered."""
enum ContentOrderField {
  published_at
}
"""ContentStatus is enum for the field status"""
enum ContentStatus @goModel(model: "github.com/hkonitzer/ohmab/ent/content.Status") {
  DRAFT
  PUBLISHED
}
"""ContentTimetableType is enum for the field timetable_type"""
enum ContentTimetableType @goModel(model: "github.com/hkonitzer/ohmab/ent/content.TimetableType") {
  DEFAULT
  REGULAR
  CLOSED
  EMERGENCYSERVICE
  HOLIDAY
  SPECIAL
}
"""ContentType is enum for the field type"""
enum ContentType @goModel(model: "github.com/hkonitzer/ohmab/ent/content.Type") {
  TEXT
  HTML
  CSS
  OTHER
}
"""
ContentWhereInput is used for filtering Content objects.
Input was generated by ent.
"""
input ContentWhereInput {
  not: ContentWhereInput
  and: [ContentWhereInput!]
  or: [ContentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """timetable_type field predicates"""
  timetableType: ContentTimetableType
  timetableTypeNEQ: ContentTimetableType
  timetableTypeIn: [ContentTimetableType!]
  timetableTypeNotIn: [ContentTimetableType!]
  """type field predicates"""
  type: ContentType
  typeNEQ: ContentType
  typeIn: [ContentType!]
  typeNotIn: [ContentType!]
  """locale field predicates"""
  locale: String
  localeNEQ: String
  localeIn: [String!]
  localeNotIn: [String!]
  localeGT: String
  localeGTE: String
  localeLT: String
  localeLTE: String
  localeContains: String
  localeHasPrefix: String
  localeHasSuffix: String
  localeEqualFold: String
  localeContainsFold: String
  """location field predicates"""
  location: ContentLocation
  locationNEQ: ContentLocation
  locationIn: [ContentLocation!]
  locationNotIn: [ContentLocation!]
  """content field predicates"""
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """status field predicates"""
  status: ContentStatus
  statusNEQ: ContentStatus
  statusIn: [ContentStatus!]
  statusNotIn: [ContentStatus!]
  """published_at field predicates"""
  publishedAt: Time
  publishedAtNEQ: Time
  publishedAtIn: [Time!]
  publishedAtNotIn: [Time!]
  publishedAtGT: Time
  publishedAtGTE: Time
  publishedAtLT: Time
  publishedAtLTE: Time
  publishedAtIsNil: Boolean
  publishedAtNotNil: Boolean
}
"""
CreateAddressInput is used for create Address object.
Input was generated by ent.
"""
input CreateAddressInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  """The address addition"""
  addition: String
  street: String
  city: String
  zip: String
  state: String
  country: String
  """The ICU locale identifier of the address, e.g. en_US, de_DE, ..."""
  locale: String
  """Is this the primary address?"""
  primary: Boolean
  """Telephone number"""
  telephone: String
  """A comment for this address"""
  comment: String
  businessID: ID
  timetableIDs: [ID!]
}
"""
CreateBusinessInput is used for create Business object.
Input was generated by ent.
"""
input CreateBusinessInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  """The main name of the business"""
  name1: String!
  """The optional second name of the business"""
  name2: String
  """The unqiue alias of the business (short name)"""
  alias: String!
  """Telephone number"""
  telephone: String
  """Email address (has to be unique)"""
  email: String
  """Website address"""
  website: String
  """A comment for this business"""
  comment: String
  """Is the business active?"""
  active: Boolean
  addressIDs: [ID!]
  tagIDs: [ID!]
  userIDs: [ID!]
  operatorIDs: [ID!]
}
"""
CreateTimetableInput is used for create Timetable object.
Input was generated by ent.
"""
input CreateTimetableInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  """The type of the timetable entry"""
  timetableType: TimetableTimetableType
  datetimeFrom: Time!
  """The duration of the timetable entry in hours, overwrites datetime_to"""
  duration: Int
  """The end of the timetable entry, only used if duration is not set"""
  datetimeTo: Time
  timeWholeDay: Boolean
  comment: String
  availabilityByPhone: String
  availabilityByEmail: String
  availabilityBySms: String
  availabilityByWhatsapp: String
  addressID: ID!
  operatorsOnDutyIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  updatedAt: Time
  deletedAt: Time
  """Set to 1 if this record should be visible in the public api"""
  usePublicapi: String
  login: String!
  """The surname of a user"""
  surname: String!
  """The first name of a user"""
  firstname: String!
  """The title of a user like PhD"""
  title: String
  email: String!
  """The password hash of a user"""
  passwordhash: String
  """A comment for this user"""
  comment: String
  """Is the user active?"""
  active: Boolean
  """The role of the user"""
  role: String
  businessIDs: [ID!]
  tagIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""The builtin Map type"""
scalar Map
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/hkonitzer/ohmab/ent.Noder") {
  """The id of the object."""
  id: ID!
}
type Operator implements Node {
  id: ID!
  """The surname of a user"""
  surname: String!
  """The first name of a user"""
  firstname: String!
  """The title of a user like PhD"""
  title: String
  """The businesses this user is associated with"""
  businesses: [Business!]
  """The persons on duty for this timetable entry"""
  timetable: [Timetable!]
}
"""Ordering options for Operator connections"""
input OperatorOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Operators."""
  field: OperatorOrderField!
}
"""Properties by which Operator connections can be ordered."""
enum OperatorOrderField {
  SURNAME
}
"""
OperatorWhereInput is used for filtering Operator objects.
Input was generated by ent.
"""
input OperatorWhereInput {
  not: OperatorWhereInput
  and: [OperatorWhereInput!]
  or: [OperatorWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """surname field predicates"""
  surname: String
  surnameNEQ: String
  surnameIn: [String!]
  surnameNotIn: [String!]
  surnameGT: String
  surnameGTE: String
  surnameLT: String
  surnameLTE: String
  surnameContains: String
  surnameHasPrefix: String
  surnameHasSuffix: String
  surnameEqualFold: String
  surnameContainsFold: String
  """firstname field predicates"""
  firstname: String
  firstnameNEQ: String
  firstnameIn: [String!]
  firstnameNotIn: [String!]
  firstnameGT: String
  firstnameGTE: String
  firstnameLT: String
  firstnameLTE: String
  firstnameContains: String
  firstnameHasPrefix: String
  firstnameHasSuffix: String
  firstnameEqualFold: String
  firstnameContainsFold: String
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """businesses edge predicates"""
  hasBusinesses: Boolean
  hasBusinessesWith: [BusinessWhereInput!]
  """timetable edge predicates"""
  hasTimetable: Boolean
  hasTimetableWith: [TimetableWhereInput!]
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  addresses(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Addresses returned from the connection."""
    where: AddressWhereInput
  ): AddressConnection!
  auditLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for AuditLogs returned from the connection."""
    orderBy: [AuditLogOrder!]

    """Filtering options for AuditLogs returned from the connection."""
    where: AuditLogWhereInput
  ): AuditLogConnection!
  businesses(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Businesses returned from the connection."""
    orderBy: [BusinessOrder!]

    """Filtering options for Businesses returned from the connection."""
    where: BusinessWhereInput
  ): BusinessConnection!
  timetables(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Timetables returned from the connection."""
    orderBy: [TimetableOrder!]

    """Filtering options for Timetables returned from the connection."""
    where: TimetableWhereInput
  ): TimetableConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: [UserOrder!]

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
type Tag implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  """The  name of the tag"""
  name: String!
  """A comment for this tag"""
  comment: String
  business: [Business!]
  user: [User!]
}
"""Ordering options for Tag connections"""
input TagOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tags."""
  field: TagOrderField!
}
"""Properties by which Tag connections can be ordered."""
enum TagOrderField {
  NAME
}
"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """comment field predicates"""
  comment: String
  commentNEQ: String
  commentIn: [String!]
  commentNotIn: [String!]
  commentGT: String
  commentGTE: String
  commentLT: String
  commentLTE: String
  commentContains: String
  commentHasPrefix: String
  commentHasSuffix: String
  commentIsNil: Boolean
  commentNotNil: Boolean
  commentEqualFold: String
  commentContainsFold: String
  """business edge predicates"""
  hasBusiness: Boolean
  hasBusinessWith: [BusinessWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""The builtin Time type"""
scalar Time
type Timetable implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  """The type of the timetable entry"""
  timetableType: TimetableTimetableType!
  datetimeFrom: Time!
  """The duration of the timetable entry in hours, overwrites datetime_to"""
  duration: Int
  """The end of the timetable entry, only used if duration is not set"""
  datetimeTo: Time
  timeWholeDay: Boolean!
  comment: String
  availabilityByPhone: String
  availabilityByEmail: String
  availabilityBySms: String
  availabilityByWhatsapp: String
  address: Address!
  operatorsOnDuty: [Operator!]
}
"""A connection to a list of items."""
type TimetableConnection {
  """A list of edges."""
  edges: [TimetableEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TimetableEdge {
  """The item at the end of the edge."""
  node: Timetable
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Timetable connections"""
input TimetableOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Timetables."""
  field: TimetableOrderField!
}
"""Properties by which Timetable connections can be ordered."""
enum TimetableOrderField {
  datetimeFrom
}
"""TimetableTimetableType is enum for the field timetable_type"""
enum TimetableTimetableType @goModel(model: "github.com/hkonitzer/ohmab/ent/timetable.TimetableType") {
  DEFAULT
  REGULAR
  CLOSED
  EMERGENCYSERVICE
  HOLIDAY
  SPECIAL
}
"""
TimetableWhereInput is used for filtering Timetable objects.
Input was generated by ent.
"""
input TimetableWhereInput {
  not: TimetableWhereInput
  and: [TimetableWhereInput!]
  or: [TimetableWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """timetable_type field predicates"""
  timetableType: TimetableTimetableType
  timetableTypeNEQ: TimetableTimetableType
  timetableTypeIn: [TimetableTimetableType!]
  timetableTypeNotIn: [TimetableTimetableType!]
  """datetime_from field predicates"""
  datetimeFrom: Time
  datetimeFromNEQ: Time
  datetimeFromIn: [Time!]
  datetimeFromNotIn: [Time!]
  datetimeFromGT: Time
  datetimeFromGTE: Time
  datetimeFromLT: Time
  datetimeFromLTE: Time
  """duration field predicates"""
  duration: Int
  durationNEQ: Int
  durationIn: [Int!]
  durationNotIn: [Int!]
  durationGT: Int
  durationGTE: Int
  durationLT: Int
  durationLTE: Int
  durationIsNil: Boolean
  durationNotNil: Boolean
  """datetime_to field predicates"""
  datetimeTo: Time
  datetimeToNEQ: Time
  datetimeToIn: [Time!]
  datetimeToNotIn: [Time!]
  datetimeToGT: Time
  datetimeToGTE: Time
  datetimeToLT: Time
  datetimeToLTE: Time
  datetimeToIsNil: Boolean
  datetimeToNotNil: Boolean
  """time_whole_day field predicates"""
  timeWholeDay: Boolean
  timeWholeDayNEQ: Boolean
  """comment field predicates"""
  comment: String
  commentNEQ: String
  commentIn: [String!]
  commentNotIn: [String!]
  commentGT: String
  commentGTE: String
  commentLT: String
  commentLTE: String
  commentContains: String
  commentHasPrefix: String
  commentHasSuffix: String
  commentIsNil: Boolean
  commentNotNil: Boolean
  commentEqualFold: String
  commentContainsFold: String
  """availability_by_phone field predicates"""
  availabilityByPhone: String
  availabilityByPhoneNEQ: String
  availabilityByPhoneIn: [String!]
  availabilityByPhoneNotIn: [String!]
  availabilityByPhoneGT: String
  availabilityByPhoneGTE: String
  availabilityByPhoneLT: String
  availabilityByPhoneLTE: String
  availabilityByPhoneContains: String
  availabilityByPhoneHasPrefix: String
  availabilityByPhoneHasSuffix: String
  availabilityByPhoneIsNil: Boolean
  availabilityByPhoneNotNil: Boolean
  availabilityByPhoneEqualFold: String
  availabilityByPhoneContainsFold: String
  """availability_by_email field predicates"""
  availabilityByEmail: String
  availabilityByEmailNEQ: String
  availabilityByEmailIn: [String!]
  availabilityByEmailNotIn: [String!]
  availabilityByEmailGT: String
  availabilityByEmailGTE: String
  availabilityByEmailLT: String
  availabilityByEmailLTE: String
  availabilityByEmailContains: String
  availabilityByEmailHasPrefix: String
  availabilityByEmailHasSuffix: String
  availabilityByEmailIsNil: Boolean
  availabilityByEmailNotNil: Boolean
  availabilityByEmailEqualFold: String
  availabilityByEmailContainsFold: String
  """availability_by_sms field predicates"""
  availabilityBySms: String
  availabilityBySmsNEQ: String
  availabilityBySmsIn: [String!]
  availabilityBySmsNotIn: [String!]
  availabilityBySmsGT: String
  availabilityBySmsGTE: String
  availabilityBySmsLT: String
  availabilityBySmsLTE: String
  availabilityBySmsContains: String
  availabilityBySmsHasPrefix: String
  availabilityBySmsHasSuffix: String
  availabilityBySmsIsNil: Boolean
  availabilityBySmsNotNil: Boolean
  availabilityBySmsEqualFold: String
  availabilityBySmsContainsFold: String
  """availability_by_whatsapp field predicates"""
  availabilityByWhatsapp: String
  availabilityByWhatsappNEQ: String
  availabilityByWhatsappIn: [String!]
  availabilityByWhatsappNotIn: [String!]
  availabilityByWhatsappGT: String
  availabilityByWhatsappGTE: String
  availabilityByWhatsappLT: String
  availabilityByWhatsappLTE: String
  availabilityByWhatsappContains: String
  availabilityByWhatsappHasPrefix: String
  availabilityByWhatsappHasSuffix: String
  availabilityByWhatsappIsNil: Boolean
  availabilityByWhatsappNotNil: Boolean
  availabilityByWhatsappEqualFold: String
  availabilityByWhatsappContainsFold: String
  """address edge predicates"""
  hasAddress: Boolean
  hasAddressWith: [AddressWhereInput!]
  """operators_on_duty edge predicates"""
  hasOperatorsOnDuty: Boolean
  hasOperatorsOnDutyWith: [OperatorWhereInput!]
}
"""
UpdateAddressInput is used for update Address object.
Input was generated by ent.
"""
input UpdateAddressInput {
  updatedAt: Time
  deletedAt: Time
  clearDeletedAt: Boolean
  """The address addition"""
  addition: String
  clearAddition: Boolean
  street: String
  clearStreet: Boolean
  city: String
  clearCity: Boolean
  zip: String
  clearZip: Boolean
  state: String
  clearState: Boolean
  country: String
  clearCountry: Boolean
  """The ICU locale identifier of the address, e.g. en_US, de_DE, ..."""
  locale: String
  """Is this the primary address?"""
  primary: Boolean
  """Telephone number"""
  telephone: String
  clearTelephone: Boolean
  """A comment for this address"""
  comment: String
  clearComment: Boolean
  businessID: ID
  clearBusiness: Boolean
  addTimetableIDs: [ID!]
  removeTimetableIDs: [ID!]
  clearTimetables: Boolean
}
"""
UpdateBusinessInput is used for update Business object.
Input was generated by ent.
"""
input UpdateBusinessInput {
  updatedAt: Time
  deletedAt: Time
  clearDeletedAt: Boolean
  """The main name of the business"""
  name1: String
  """The optional second name of the business"""
  name2: String
  clearName2: Boolean
  """The unqiue alias of the business (short name)"""
  alias: String
  """Telephone number"""
  telephone: String
  clearTelephone: Boolean
  """Email address (has to be unique)"""
  email: String
  clearEmail: Boolean
  """Website address"""
  website: String
  clearWebsite: Boolean
  """A comment for this business"""
  comment: String
  clearComment: Boolean
  """Is the business active?"""
  active: Boolean
  addAddressIDs: [ID!]
  removeAddressIDs: [ID!]
  clearAddresses: Boolean
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  addOperatorIDs: [ID!]
  removeOperatorIDs: [ID!]
  clearOperators: Boolean
}
"""
UpdateTimetableInput is used for update Timetable object.
Input was generated by ent.
"""
input UpdateTimetableInput {
  updatedAt: Time
  deletedAt: Time
  clearDeletedAt: Boolean
  """The type of the timetable entry"""
  timetableType: TimetableTimetableType
  datetimeFrom: Time
  """The duration of the timetable entry in hours, overwrites datetime_to"""
  duration: Int
  clearDuration: Boolean
  """The end of the timetable entry, only used if duration is not set"""
  datetimeTo: Time
  clearDatetimeTo: Boolean
  timeWholeDay: Boolean
  comment: String
  clearComment: Boolean
  availabilityByPhone: String
  clearAvailabilityByPhone: Boolean
  availabilityByEmail: String
  clearAvailabilityByEmail: Boolean
  availabilityBySms: String
  clearAvailabilityBySms: Boolean
  availabilityByWhatsapp: String
  clearAvailabilityByWhatsapp: Boolean
  addressID: ID
  addOperatorsOnDutyIDs: [ID!]
  removeOperatorsOnDutyIDs: [ID!]
  clearOperatorsOnDuty: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updatedAt: Time
  deletedAt: Time
  clearDeletedAt: Boolean
  """Set to 1 if this record should be visible in the public api"""
  usePublicapi: String
  login: String
  """The surname of a user"""
  surname: String
  """The first name of a user"""
  firstname: String
  """The title of a user like PhD"""
  title: String
  clearTitle: Boolean
  email: String
  """The password hash of a user"""
  passwordhash: String
  clearPasswordhash: Boolean
  """A comment for this user"""
  comment: String
  clearComment: Boolean
  """Is the user active?"""
  active: Boolean
  """The role of the user"""
  role: String
  addBusinessIDs: [ID!]
  removeBusinessIDs: [ID!]
  clearBusinesses: Boolean
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
  clearTags: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  """The surname of a user"""
  surname: String!
  """The first name of a user"""
  firstname: String!
  """The title of a user like PhD"""
  title: String
  email: String!
  """A comment for this user"""
  comment: String
  """Is the user active?"""
  active: Boolean!
  """The businesses this user is associated with"""
  businesses: [Business!]
  tags: [Tag!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  SURNAME
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtNEQ: Time
  deletedAtIn: [Time!]
  deletedAtNotIn: [Time!]
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtIsNil: Boolean
  deletedAtNotNil: Boolean
  """surname field predicates"""
  surname: String
  surnameNEQ: String
  surnameIn: [String!]
  surnameNotIn: [String!]
  surnameGT: String
  surnameGTE: String
  surnameLT: String
  surnameLTE: String
  surnameContains: String
  surnameHasPrefix: String
  surnameHasSuffix: String
  surnameEqualFold: String
  surnameContainsFold: String
  """firstname field predicates"""
  firstname: String
  firstnameNEQ: String
  firstnameIn: [String!]
  firstnameNotIn: [String!]
  firstnameGT: String
  firstnameGTE: String
  firstnameLT: String
  firstnameLTE: String
  firstnameContains: String
  firstnameHasPrefix: String
  firstnameHasSuffix: String
  firstnameEqualFold: String
  firstnameContainsFold: String
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """comment field predicates"""
  comment: String
  commentNEQ: String
  commentIn: [String!]
  commentNotIn: [String!]
  commentGT: String
  commentGTE: String
  commentLT: String
  commentLTE: String
  commentContains: String
  commentHasPrefix: String
  commentHasSuffix: String
  commentIsNil: Boolean
  commentNotNil: Boolean
  commentEqualFold: String
  commentContainsFold: String
  """active field predicates"""
  active: Boolean
  activeNEQ: Boolean
  """businesses edge predicates"""
  hasBusinesses: Boolean
  hasBusinessesWith: [BusinessWhereInput!]
  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
}
