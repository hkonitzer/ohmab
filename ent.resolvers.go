package OHMAB

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/google/uuid"
	"github.com/hkonitzer/ohmab/ent"
)

// EntityValues is the resolver for the entityValues field.
func (r *auditLogResolver) EntityValues(ctx context.Context, obj *ent.AuditLog) (map[string]interface{}, error) {
	panic(fmt.Errorf("not implemented: EntityValues - entityValues"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id uuid.UUID) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []uuid.UUID) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// Addresses is the resolver for the addresses field.
func (r *queryResolver) Addresses(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, where *ent.AddressWhereInput) (*ent.AddressConnection, error) {
	panic(fmt.Errorf("not implemented: Addresses - addresses"))
}

// Businesses is the resolver for the businesses field.
func (r *queryResolver) Businesses(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy []*ent.BusinessOrder, where *ent.BusinessWhereInput) (*ent.BusinessConnection, error) {
	return r.client.Business.Query().Paginate(ctx, after, first, before, last, ent.WithBusinessOrder(orderBy), ent.WithBusinessFilter(where.Filter))
}

// Timetables is the resolver for the timetables field.
func (r *queryResolver) Timetables(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy []*ent.TimetableOrder, where *ent.TimetableWhereInput) (*ent.TimetableConnection, error) {
	return r.client.Timetable.Query().WithAddress().Paginate(ctx, after, first, before, last, ent.WithTimetableOrder(orderBy), ent.WithTimetableFilter(where.Filter))
}

// AuditLog returns AuditLogResolver implementation.
func (r *Resolver) AuditLog() AuditLogResolver { return &auditLogResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type auditLogResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
