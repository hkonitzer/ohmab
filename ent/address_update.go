// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"hynie.de/ohmab/ent/address"
	"hynie.de/ohmab/ent/business"
	"hynie.de/ohmab/ent/predicate"
	"hynie.de/ohmab/ent/timetable"
)

// AddressUpdate is the builder for updating Address entities.
type AddressUpdate struct {
	config
	hooks    []Hook
	mutation *AddressMutation
}

// Where appends a list predicates to the AddressUpdate builder.
func (au *AddressUpdate) Where(ps ...predicate.Address) *AddressUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AddressUpdate) SetUpdatedAt(t time.Time) *AddressUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AddressUpdate) SetDeletedAt(t time.Time) *AddressUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AddressUpdate) SetNillableDeletedAt(t *time.Time) *AddressUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AddressUpdate) ClearDeletedAt() *AddressUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetAddition sets the "addition" field.
func (au *AddressUpdate) SetAddition(s string) *AddressUpdate {
	au.mutation.SetAddition(s)
	return au
}

// SetNillableAddition sets the "addition" field if the given value is not nil.
func (au *AddressUpdate) SetNillableAddition(s *string) *AddressUpdate {
	if s != nil {
		au.SetAddition(*s)
	}
	return au
}

// ClearAddition clears the value of the "addition" field.
func (au *AddressUpdate) ClearAddition() *AddressUpdate {
	au.mutation.ClearAddition()
	return au
}

// SetStreet sets the "street" field.
func (au *AddressUpdate) SetStreet(s string) *AddressUpdate {
	au.mutation.SetStreet(s)
	return au
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (au *AddressUpdate) SetNillableStreet(s *string) *AddressUpdate {
	if s != nil {
		au.SetStreet(*s)
	}
	return au
}

// ClearStreet clears the value of the "street" field.
func (au *AddressUpdate) ClearStreet() *AddressUpdate {
	au.mutation.ClearStreet()
	return au
}

// SetCity sets the "city" field.
func (au *AddressUpdate) SetCity(s string) *AddressUpdate {
	au.mutation.SetCity(s)
	return au
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCity(s *string) *AddressUpdate {
	if s != nil {
		au.SetCity(*s)
	}
	return au
}

// ClearCity clears the value of the "city" field.
func (au *AddressUpdate) ClearCity() *AddressUpdate {
	au.mutation.ClearCity()
	return au
}

// SetZip sets the "zip" field.
func (au *AddressUpdate) SetZip(s string) *AddressUpdate {
	au.mutation.SetZip(s)
	return au
}

// SetNillableZip sets the "zip" field if the given value is not nil.
func (au *AddressUpdate) SetNillableZip(s *string) *AddressUpdate {
	if s != nil {
		au.SetZip(*s)
	}
	return au
}

// ClearZip clears the value of the "zip" field.
func (au *AddressUpdate) ClearZip() *AddressUpdate {
	au.mutation.ClearZip()
	return au
}

// SetState sets the "state" field.
func (au *AddressUpdate) SetState(s string) *AddressUpdate {
	au.mutation.SetState(s)
	return au
}

// SetNillableState sets the "state" field if the given value is not nil.
func (au *AddressUpdate) SetNillableState(s *string) *AddressUpdate {
	if s != nil {
		au.SetState(*s)
	}
	return au
}

// ClearState clears the value of the "state" field.
func (au *AddressUpdate) ClearState() *AddressUpdate {
	au.mutation.ClearState()
	return au
}

// SetCountry sets the "country" field.
func (au *AddressUpdate) SetCountry(s string) *AddressUpdate {
	au.mutation.SetCountry(s)
	return au
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCountry(s *string) *AddressUpdate {
	if s != nil {
		au.SetCountry(*s)
	}
	return au
}

// ClearCountry clears the value of the "country" field.
func (au *AddressUpdate) ClearCountry() *AddressUpdate {
	au.mutation.ClearCountry()
	return au
}

// SetTelephone sets the "telephone" field.
func (au *AddressUpdate) SetTelephone(s string) *AddressUpdate {
	au.mutation.SetTelephone(s)
	return au
}

// SetNillableTelephone sets the "telephone" field if the given value is not nil.
func (au *AddressUpdate) SetNillableTelephone(s *string) *AddressUpdate {
	if s != nil {
		au.SetTelephone(*s)
	}
	return au
}

// ClearTelephone clears the value of the "telephone" field.
func (au *AddressUpdate) ClearTelephone() *AddressUpdate {
	au.mutation.ClearTelephone()
	return au
}

// SetComment sets the "comment" field.
func (au *AddressUpdate) SetComment(s string) *AddressUpdate {
	au.mutation.SetComment(s)
	return au
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (au *AddressUpdate) SetNillableComment(s *string) *AddressUpdate {
	if s != nil {
		au.SetComment(*s)
	}
	return au
}

// ClearComment clears the value of the "comment" field.
func (au *AddressUpdate) ClearComment() *AddressUpdate {
	au.mutation.ClearComment()
	return au
}

// AddBusinesIDs adds the "business" edge to the Business entity by IDs.
func (au *AddressUpdate) AddBusinesIDs(ids ...uuid.UUID) *AddressUpdate {
	au.mutation.AddBusinesIDs(ids...)
	return au
}

// AddBusiness adds the "business" edges to the Business entity.
func (au *AddressUpdate) AddBusiness(b ...*Business) *AddressUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.AddBusinesIDs(ids...)
}

// AddTimetableIDs adds the "timetables" edge to the Timetable entity by IDs.
func (au *AddressUpdate) AddTimetableIDs(ids ...uuid.UUID) *AddressUpdate {
	au.mutation.AddTimetableIDs(ids...)
	return au
}

// AddTimetables adds the "timetables" edges to the Timetable entity.
func (au *AddressUpdate) AddTimetables(t ...*Timetable) *AddressUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTimetableIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (au *AddressUpdate) Mutation() *AddressMutation {
	return au.mutation
}

// ClearBusiness clears all "business" edges to the Business entity.
func (au *AddressUpdate) ClearBusiness() *AddressUpdate {
	au.mutation.ClearBusiness()
	return au
}

// RemoveBusinesIDs removes the "business" edge to Business entities by IDs.
func (au *AddressUpdate) RemoveBusinesIDs(ids ...uuid.UUID) *AddressUpdate {
	au.mutation.RemoveBusinesIDs(ids...)
	return au
}

// RemoveBusiness removes "business" edges to Business entities.
func (au *AddressUpdate) RemoveBusiness(b ...*Business) *AddressUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.RemoveBusinesIDs(ids...)
}

// ClearTimetables clears all "timetables" edges to the Timetable entity.
func (au *AddressUpdate) ClearTimetables() *AddressUpdate {
	au.mutation.ClearTimetables()
	return au
}

// RemoveTimetableIDs removes the "timetables" edge to Timetable entities by IDs.
func (au *AddressUpdate) RemoveTimetableIDs(ids ...uuid.UUID) *AddressUpdate {
	au.mutation.RemoveTimetableIDs(ids...)
	return au
}

// RemoveTimetables removes "timetables" edges to Timetable entities.
func (au *AddressUpdate) RemoveTimetables(t ...*Timetable) *AddressUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTimetableIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddressUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddressUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddressUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddressUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AddressUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := address.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(address.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(address.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(address.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.Addition(); ok {
		_spec.SetField(address.FieldAddition, field.TypeString, value)
	}
	if au.mutation.AdditionCleared() {
		_spec.ClearField(address.FieldAddition, field.TypeString)
	}
	if value, ok := au.mutation.Street(); ok {
		_spec.SetField(address.FieldStreet, field.TypeString, value)
	}
	if au.mutation.StreetCleared() {
		_spec.ClearField(address.FieldStreet, field.TypeString)
	}
	if value, ok := au.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
	}
	if au.mutation.CityCleared() {
		_spec.ClearField(address.FieldCity, field.TypeString)
	}
	if value, ok := au.mutation.Zip(); ok {
		_spec.SetField(address.FieldZip, field.TypeString, value)
	}
	if au.mutation.ZipCleared() {
		_spec.ClearField(address.FieldZip, field.TypeString)
	}
	if value, ok := au.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
	}
	if au.mutation.StateCleared() {
		_spec.ClearField(address.FieldState, field.TypeString)
	}
	if value, ok := au.mutation.Country(); ok {
		_spec.SetField(address.FieldCountry, field.TypeString, value)
	}
	if au.mutation.CountryCleared() {
		_spec.ClearField(address.FieldCountry, field.TypeString)
	}
	if value, ok := au.mutation.Telephone(); ok {
		_spec.SetField(address.FieldTelephone, field.TypeString, value)
	}
	if au.mutation.TelephoneCleared() {
		_spec.ClearField(address.FieldTelephone, field.TypeString)
	}
	if value, ok := au.mutation.Comment(); ok {
		_spec.SetField(address.FieldComment, field.TypeString, value)
	}
	if au.mutation.CommentCleared() {
		_spec.ClearField(address.FieldComment, field.TypeString)
	}
	if au.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BusinessTable,
			Columns: address.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedBusinessIDs(); len(nodes) > 0 && !au.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BusinessTable,
			Columns: address.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BusinessTable,
			Columns: address.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TimetablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.TimetablesTable,
			Columns: []string{address.TimetablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTimetablesIDs(); len(nodes) > 0 && !au.mutation.TimetablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.TimetablesTable,
			Columns: []string{address.TimetablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TimetablesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.TimetablesTable,
			Columns: []string{address.TimetablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AddressUpdateOne is the builder for updating a single Address entity.
type AddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AddressUpdateOne) SetUpdatedAt(t time.Time) *AddressUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AddressUpdateOne) SetDeletedAt(t time.Time) *AddressUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableDeletedAt(t *time.Time) *AddressUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AddressUpdateOne) ClearDeletedAt() *AddressUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetAddition sets the "addition" field.
func (auo *AddressUpdateOne) SetAddition(s string) *AddressUpdateOne {
	auo.mutation.SetAddition(s)
	return auo
}

// SetNillableAddition sets the "addition" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableAddition(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetAddition(*s)
	}
	return auo
}

// ClearAddition clears the value of the "addition" field.
func (auo *AddressUpdateOne) ClearAddition() *AddressUpdateOne {
	auo.mutation.ClearAddition()
	return auo
}

// SetStreet sets the "street" field.
func (auo *AddressUpdateOne) SetStreet(s string) *AddressUpdateOne {
	auo.mutation.SetStreet(s)
	return auo
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableStreet(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetStreet(*s)
	}
	return auo
}

// ClearStreet clears the value of the "street" field.
func (auo *AddressUpdateOne) ClearStreet() *AddressUpdateOne {
	auo.mutation.ClearStreet()
	return auo
}

// SetCity sets the "city" field.
func (auo *AddressUpdateOne) SetCity(s string) *AddressUpdateOne {
	auo.mutation.SetCity(s)
	return auo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCity(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetCity(*s)
	}
	return auo
}

// ClearCity clears the value of the "city" field.
func (auo *AddressUpdateOne) ClearCity() *AddressUpdateOne {
	auo.mutation.ClearCity()
	return auo
}

// SetZip sets the "zip" field.
func (auo *AddressUpdateOne) SetZip(s string) *AddressUpdateOne {
	auo.mutation.SetZip(s)
	return auo
}

// SetNillableZip sets the "zip" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableZip(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetZip(*s)
	}
	return auo
}

// ClearZip clears the value of the "zip" field.
func (auo *AddressUpdateOne) ClearZip() *AddressUpdateOne {
	auo.mutation.ClearZip()
	return auo
}

// SetState sets the "state" field.
func (auo *AddressUpdateOne) SetState(s string) *AddressUpdateOne {
	auo.mutation.SetState(s)
	return auo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableState(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetState(*s)
	}
	return auo
}

// ClearState clears the value of the "state" field.
func (auo *AddressUpdateOne) ClearState() *AddressUpdateOne {
	auo.mutation.ClearState()
	return auo
}

// SetCountry sets the "country" field.
func (auo *AddressUpdateOne) SetCountry(s string) *AddressUpdateOne {
	auo.mutation.SetCountry(s)
	return auo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCountry(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetCountry(*s)
	}
	return auo
}

// ClearCountry clears the value of the "country" field.
func (auo *AddressUpdateOne) ClearCountry() *AddressUpdateOne {
	auo.mutation.ClearCountry()
	return auo
}

// SetTelephone sets the "telephone" field.
func (auo *AddressUpdateOne) SetTelephone(s string) *AddressUpdateOne {
	auo.mutation.SetTelephone(s)
	return auo
}

// SetNillableTelephone sets the "telephone" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableTelephone(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetTelephone(*s)
	}
	return auo
}

// ClearTelephone clears the value of the "telephone" field.
func (auo *AddressUpdateOne) ClearTelephone() *AddressUpdateOne {
	auo.mutation.ClearTelephone()
	return auo
}

// SetComment sets the "comment" field.
func (auo *AddressUpdateOne) SetComment(s string) *AddressUpdateOne {
	auo.mutation.SetComment(s)
	return auo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableComment(s *string) *AddressUpdateOne {
	if s != nil {
		auo.SetComment(*s)
	}
	return auo
}

// ClearComment clears the value of the "comment" field.
func (auo *AddressUpdateOne) ClearComment() *AddressUpdateOne {
	auo.mutation.ClearComment()
	return auo
}

// AddBusinesIDs adds the "business" edge to the Business entity by IDs.
func (auo *AddressUpdateOne) AddBusinesIDs(ids ...uuid.UUID) *AddressUpdateOne {
	auo.mutation.AddBusinesIDs(ids...)
	return auo
}

// AddBusiness adds the "business" edges to the Business entity.
func (auo *AddressUpdateOne) AddBusiness(b ...*Business) *AddressUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.AddBusinesIDs(ids...)
}

// AddTimetableIDs adds the "timetables" edge to the Timetable entity by IDs.
func (auo *AddressUpdateOne) AddTimetableIDs(ids ...uuid.UUID) *AddressUpdateOne {
	auo.mutation.AddTimetableIDs(ids...)
	return auo
}

// AddTimetables adds the "timetables" edges to the Timetable entity.
func (auo *AddressUpdateOne) AddTimetables(t ...*Timetable) *AddressUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTimetableIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (auo *AddressUpdateOne) Mutation() *AddressMutation {
	return auo.mutation
}

// ClearBusiness clears all "business" edges to the Business entity.
func (auo *AddressUpdateOne) ClearBusiness() *AddressUpdateOne {
	auo.mutation.ClearBusiness()
	return auo
}

// RemoveBusinesIDs removes the "business" edge to Business entities by IDs.
func (auo *AddressUpdateOne) RemoveBusinesIDs(ids ...uuid.UUID) *AddressUpdateOne {
	auo.mutation.RemoveBusinesIDs(ids...)
	return auo
}

// RemoveBusiness removes "business" edges to Business entities.
func (auo *AddressUpdateOne) RemoveBusiness(b ...*Business) *AddressUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.RemoveBusinesIDs(ids...)
}

// ClearTimetables clears all "timetables" edges to the Timetable entity.
func (auo *AddressUpdateOne) ClearTimetables() *AddressUpdateOne {
	auo.mutation.ClearTimetables()
	return auo
}

// RemoveTimetableIDs removes the "timetables" edge to Timetable entities by IDs.
func (auo *AddressUpdateOne) RemoveTimetableIDs(ids ...uuid.UUID) *AddressUpdateOne {
	auo.mutation.RemoveTimetableIDs(ids...)
	return auo
}

// RemoveTimetables removes "timetables" edges to Timetable entities.
func (auo *AddressUpdateOne) RemoveTimetables(t ...*Timetable) *AddressUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTimetableIDs(ids...)
}

// Where appends a list predicates to the AddressUpdate builder.
func (auo *AddressUpdateOne) Where(ps ...predicate.Address) *AddressUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddressUpdateOne) Select(field string, fields ...string) *AddressUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Address entity.
func (auo *AddressUpdateOne) Save(ctx context.Context) (*Address, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddressUpdateOne) SaveX(ctx context.Context) *Address {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddressUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddressUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AddressUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := address.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AddressUpdateOne) sqlSave(ctx context.Context) (_node *Address, err error) {
	_spec := sqlgraph.NewUpdateSpec(address.Table, address.Columns, sqlgraph.NewFieldSpec(address.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Address.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for _, f := range fields {
			if !address.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(address.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(address.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(address.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.Addition(); ok {
		_spec.SetField(address.FieldAddition, field.TypeString, value)
	}
	if auo.mutation.AdditionCleared() {
		_spec.ClearField(address.FieldAddition, field.TypeString)
	}
	if value, ok := auo.mutation.Street(); ok {
		_spec.SetField(address.FieldStreet, field.TypeString, value)
	}
	if auo.mutation.StreetCleared() {
		_spec.ClearField(address.FieldStreet, field.TypeString)
	}
	if value, ok := auo.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
	}
	if auo.mutation.CityCleared() {
		_spec.ClearField(address.FieldCity, field.TypeString)
	}
	if value, ok := auo.mutation.Zip(); ok {
		_spec.SetField(address.FieldZip, field.TypeString, value)
	}
	if auo.mutation.ZipCleared() {
		_spec.ClearField(address.FieldZip, field.TypeString)
	}
	if value, ok := auo.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
	}
	if auo.mutation.StateCleared() {
		_spec.ClearField(address.FieldState, field.TypeString)
	}
	if value, ok := auo.mutation.Country(); ok {
		_spec.SetField(address.FieldCountry, field.TypeString, value)
	}
	if auo.mutation.CountryCleared() {
		_spec.ClearField(address.FieldCountry, field.TypeString)
	}
	if value, ok := auo.mutation.Telephone(); ok {
		_spec.SetField(address.FieldTelephone, field.TypeString, value)
	}
	if auo.mutation.TelephoneCleared() {
		_spec.ClearField(address.FieldTelephone, field.TypeString)
	}
	if value, ok := auo.mutation.Comment(); ok {
		_spec.SetField(address.FieldComment, field.TypeString, value)
	}
	if auo.mutation.CommentCleared() {
		_spec.ClearField(address.FieldComment, field.TypeString)
	}
	if auo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BusinessTable,
			Columns: address.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedBusinessIDs(); len(nodes) > 0 && !auo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BusinessTable,
			Columns: address.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.BusinessTable,
			Columns: address.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TimetablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.TimetablesTable,
			Columns: []string{address.TimetablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTimetablesIDs(); len(nodes) > 0 && !auo.mutation.TimetablesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.TimetablesTable,
			Columns: []string{address.TimetablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TimetablesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.TimetablesTable,
			Columns: []string{address.TimetablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Address{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
