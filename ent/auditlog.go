// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"hynie.de/ohmab/ent/auditlog"
)

// AuditLog is the model entity for the AuditLog schema.
type AuditLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// EntitySchema holds the value of the "entity_schema" field.
	EntitySchema string `json:"entity_schema,omitempty"`
	// EntityValues holds the value of the "entity_values" field.
	EntityValues map[string]string `json:"entity_values,omitempty"`
	// EntityUUID holds the value of the "entity_uuid" field.
	EntityUUID string `json:"entity_uuid,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp    time.Time `json:"timestamp,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuditLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldEntityValues:
			values[i] = new([]byte)
		case auditlog.FieldUser, auditlog.FieldAction, auditlog.FieldEntitySchema, auditlog.FieldEntityUUID:
			values[i] = new(sql.NullString)
		case auditlog.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case auditlog.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuditLog fields.
func (al *AuditLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case auditlog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				al.ID = *value
			}
		case auditlog.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				al.User = value.String
			}
		case auditlog.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				al.Action = value.String
			}
		case auditlog.FieldEntitySchema:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_schema", values[i])
			} else if value.Valid {
				al.EntitySchema = value.String
			}
		case auditlog.FieldEntityValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field entity_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &al.EntityValues); err != nil {
					return fmt.Errorf("unmarshal field entity_values: %w", err)
				}
			}
		case auditlog.FieldEntityUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_uuid", values[i])
			} else if value.Valid {
				al.EntityUUID = value.String
			}
		case auditlog.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				al.Timestamp = value.Time
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuditLog.
// This includes values selected through modifiers, order, etc.
func (al *AuditLog) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// Update returns a builder for updating this AuditLog.
// Note that you need to call AuditLog.Unwrap() before calling this method if this AuditLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AuditLog) Update() *AuditLogUpdateOne {
	return NewAuditLogClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AuditLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AuditLog) Unwrap() *AuditLog {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuditLog is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AuditLog) String() string {
	var builder strings.Builder
	builder.WriteString("AuditLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("user=")
	builder.WriteString(al.User)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(al.Action)
	builder.WriteString(", ")
	builder.WriteString("entity_schema=")
	builder.WriteString(al.EntitySchema)
	builder.WriteString(", ")
	builder.WriteString("entity_values=")
	builder.WriteString(fmt.Sprintf("%v", al.EntityValues))
	builder.WriteString(", ")
	builder.WriteString("entity_uuid=")
	builder.WriteString(al.EntityUUID)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(al.Timestamp.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AuditLogs is a parsable slice of AuditLog.
type AuditLogs []*AuditLog
