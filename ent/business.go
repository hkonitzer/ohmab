// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hkonitzer/ohmab/ent/business"
)

// Business is the model entity for the Business schema.
type Business struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// The main name of the business
	Name1 string `json:"name1,omitempty"`
	// The optional second name of the business
	Name2 *string `json:"name2,omitempty"`
	// The unqiue alias of the business (short name)
	Alias string `json:"alias,omitempty"`
	// Telephone number
	Telephone *string `json:"telephone,omitempty"`
	// Email address (has to be unique)
	Email *string `json:"email,omitempty"`
	// Website address
	Website *string `json:"website,omitempty"`
	// A comment for this business
	Comment *string `json:"comment,omitempty"`
	// Is the business active?
	Active bool `json:"active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BusinessQuery when eager-loading is set.
	Edges        BusinessEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BusinessEdges holds the relations/edges for other nodes in the graph.
type BusinessEdges struct {
	// Addresses holds the value of the addresses edge.
	Addresses []*Address `json:"addresses,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Operators holds the value of the operators edge.
	Operators []*Operator `json:"operators,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedAddresses map[string][]*Address
	namedTags      map[string][]*Tag
	namedUsers     map[string][]*User
	namedOperators map[string][]*Operator
}

// AddressesOrErr returns the Addresses value or an error if the edge
// was not loaded in eager-loading.
func (e BusinessEdges) AddressesOrErr() ([]*Address, error) {
	if e.loadedTypes[0] {
		return e.Addresses, nil
	}
	return nil, &NotLoadedError{edge: "addresses"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e BusinessEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e BusinessEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// OperatorsOrErr returns the Operators value or an error if the edge
// was not loaded in eager-loading.
func (e BusinessEdges) OperatorsOrErr() ([]*Operator, error) {
	if e.loadedTypes[3] {
		return e.Operators, nil
	}
	return nil, &NotLoadedError{edge: "operators"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Business) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case business.FieldActive:
			values[i] = new(sql.NullBool)
		case business.FieldName1, business.FieldName2, business.FieldAlias, business.FieldTelephone, business.FieldEmail, business.FieldWebsite, business.FieldComment:
			values[i] = new(sql.NullString)
		case business.FieldCreatedAt, business.FieldUpdatedAt, business.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case business.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Business fields.
func (b *Business) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case business.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case business.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case business.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case business.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				b.DeletedAt = value.Time
			}
		case business.FieldName1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name1", values[i])
			} else if value.Valid {
				b.Name1 = value.String
			}
		case business.FieldName2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name2", values[i])
			} else if value.Valid {
				b.Name2 = new(string)
				*b.Name2 = value.String
			}
		case business.FieldAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias", values[i])
			} else if value.Valid {
				b.Alias = value.String
			}
		case business.FieldTelephone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telephone", values[i])
			} else if value.Valid {
				b.Telephone = new(string)
				*b.Telephone = value.String
			}
		case business.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				b.Email = new(string)
				*b.Email = value.String
			}
		case business.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				b.Website = new(string)
				*b.Website = value.String
			}
		case business.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				b.Comment = new(string)
				*b.Comment = value.String
			}
		case business.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				b.Active = value.Bool
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Business.
// This includes values selected through modifiers, order, etc.
func (b *Business) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryAddresses queries the "addresses" edge of the Business entity.
func (b *Business) QueryAddresses() *AddressQuery {
	return NewBusinessClient(b.config).QueryAddresses(b)
}

// QueryTags queries the "tags" edge of the Business entity.
func (b *Business) QueryTags() *TagQuery {
	return NewBusinessClient(b.config).QueryTags(b)
}

// QueryUsers queries the "users" edge of the Business entity.
func (b *Business) QueryUsers() *UserQuery {
	return NewBusinessClient(b.config).QueryUsers(b)
}

// QueryOperators queries the "operators" edge of the Business entity.
func (b *Business) QueryOperators() *OperatorQuery {
	return NewBusinessClient(b.config).QueryOperators(b)
}

// Update returns a builder for updating this Business.
// Note that you need to call Business.Unwrap() before calling this method if this Business
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Business) Update() *BusinessUpdateOne {
	return NewBusinessClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Business entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Business) Unwrap() *Business {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Business is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Business) String() string {
	var builder strings.Builder
	builder.WriteString("Business(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(b.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name1=")
	builder.WriteString(b.Name1)
	builder.WriteString(", ")
	if v := b.Name2; v != nil {
		builder.WriteString("name2=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("alias=")
	builder.WriteString(b.Alias)
	builder.WriteString(", ")
	if v := b.Telephone; v != nil {
		builder.WriteString("telephone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := b.Email; v != nil {
		builder.WriteString("email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := b.Website; v != nil {
		builder.WriteString("website=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := b.Comment; v != nil {
		builder.WriteString("comment=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", b.Active))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAddresses returns the Addresses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Business) NamedAddresses(name string) ([]*Address, error) {
	if b.Edges.namedAddresses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedAddresses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Business) appendNamedAddresses(name string, edges ...*Address) {
	if b.Edges.namedAddresses == nil {
		b.Edges.namedAddresses = make(map[string][]*Address)
	}
	if len(edges) == 0 {
		b.Edges.namedAddresses[name] = []*Address{}
	} else {
		b.Edges.namedAddresses[name] = append(b.Edges.namedAddresses[name], edges...)
	}
}

// NamedTags returns the Tags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Business) NamedTags(name string) ([]*Tag, error) {
	if b.Edges.namedTags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedTags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Business) appendNamedTags(name string, edges ...*Tag) {
	if b.Edges.namedTags == nil {
		b.Edges.namedTags = make(map[string][]*Tag)
	}
	if len(edges) == 0 {
		b.Edges.namedTags[name] = []*Tag{}
	} else {
		b.Edges.namedTags[name] = append(b.Edges.namedTags[name], edges...)
	}
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Business) NamedUsers(name string) ([]*User, error) {
	if b.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Business) appendNamedUsers(name string, edges ...*User) {
	if b.Edges.namedUsers == nil {
		b.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		b.Edges.namedUsers[name] = []*User{}
	} else {
		b.Edges.namedUsers[name] = append(b.Edges.namedUsers[name], edges...)
	}
}

// NamedOperators returns the Operators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Business) NamedOperators(name string) ([]*Operator, error) {
	if b.Edges.namedOperators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedOperators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Business) appendNamedOperators(name string, edges ...*Operator) {
	if b.Edges.namedOperators == nil {
		b.Edges.namedOperators = make(map[string][]*Operator)
	}
	if len(edges) == 0 {
		b.Edges.namedOperators[name] = []*Operator{}
	} else {
		b.Edges.namedOperators[name] = append(b.Edges.namedOperators[name], edges...)
	}
}

// Businesses is a parsable slice of Business.
type Businesses []*Business
