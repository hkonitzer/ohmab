// OHMAB
// Code generated by entc, DO NOT EDIT.

package business

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"hynie.de/ohmab/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldDeletedAt, v))
}

// Name1 applies equality check predicate on the "name1" field. It's identical to Name1EQ.
func Name1(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldName1, v))
}

// Name2 applies equality check predicate on the "name2" field. It's identical to Name2EQ.
func Name2(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldName2, v))
}

// Alias applies equality check predicate on the "alias" field. It's identical to AliasEQ.
func Alias(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldAlias, v))
}

// Telephone applies equality check predicate on the "telephone" field. It's identical to TelephoneEQ.
func Telephone(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldTelephone, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldEmail, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldWebsite, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldComment, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldDeletedAt))
}

// Name1EQ applies the EQ predicate on the "name1" field.
func Name1EQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldName1, v))
}

// Name1NEQ applies the NEQ predicate on the "name1" field.
func Name1NEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldName1, v))
}

// Name1In applies the In predicate on the "name1" field.
func Name1In(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldName1, vs...))
}

// Name1NotIn applies the NotIn predicate on the "name1" field.
func Name1NotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldName1, vs...))
}

// Name1GT applies the GT predicate on the "name1" field.
func Name1GT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldName1, v))
}

// Name1GTE applies the GTE predicate on the "name1" field.
func Name1GTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldName1, v))
}

// Name1LT applies the LT predicate on the "name1" field.
func Name1LT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldName1, v))
}

// Name1LTE applies the LTE predicate on the "name1" field.
func Name1LTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldName1, v))
}

// Name1Contains applies the Contains predicate on the "name1" field.
func Name1Contains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldName1, v))
}

// Name1HasPrefix applies the HasPrefix predicate on the "name1" field.
func Name1HasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldName1, v))
}

// Name1HasSuffix applies the HasSuffix predicate on the "name1" field.
func Name1HasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldName1, v))
}

// Name1EqualFold applies the EqualFold predicate on the "name1" field.
func Name1EqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldName1, v))
}

// Name1ContainsFold applies the ContainsFold predicate on the "name1" field.
func Name1ContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldName1, v))
}

// Name2EQ applies the EQ predicate on the "name2" field.
func Name2EQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldName2, v))
}

// Name2NEQ applies the NEQ predicate on the "name2" field.
func Name2NEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldName2, v))
}

// Name2In applies the In predicate on the "name2" field.
func Name2In(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldName2, vs...))
}

// Name2NotIn applies the NotIn predicate on the "name2" field.
func Name2NotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldName2, vs...))
}

// Name2GT applies the GT predicate on the "name2" field.
func Name2GT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldName2, v))
}

// Name2GTE applies the GTE predicate on the "name2" field.
func Name2GTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldName2, v))
}

// Name2LT applies the LT predicate on the "name2" field.
func Name2LT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldName2, v))
}

// Name2LTE applies the LTE predicate on the "name2" field.
func Name2LTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldName2, v))
}

// Name2Contains applies the Contains predicate on the "name2" field.
func Name2Contains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldName2, v))
}

// Name2HasPrefix applies the HasPrefix predicate on the "name2" field.
func Name2HasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldName2, v))
}

// Name2HasSuffix applies the HasSuffix predicate on the "name2" field.
func Name2HasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldName2, v))
}

// Name2IsNil applies the IsNil predicate on the "name2" field.
func Name2IsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldName2))
}

// Name2NotNil applies the NotNil predicate on the "name2" field.
func Name2NotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldName2))
}

// Name2EqualFold applies the EqualFold predicate on the "name2" field.
func Name2EqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldName2, v))
}

// Name2ContainsFold applies the ContainsFold predicate on the "name2" field.
func Name2ContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldName2, v))
}

// AliasEQ applies the EQ predicate on the "alias" field.
func AliasEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldAlias, v))
}

// AliasNEQ applies the NEQ predicate on the "alias" field.
func AliasNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldAlias, v))
}

// AliasIn applies the In predicate on the "alias" field.
func AliasIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldAlias, vs...))
}

// AliasNotIn applies the NotIn predicate on the "alias" field.
func AliasNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldAlias, vs...))
}

// AliasGT applies the GT predicate on the "alias" field.
func AliasGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldAlias, v))
}

// AliasGTE applies the GTE predicate on the "alias" field.
func AliasGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldAlias, v))
}

// AliasLT applies the LT predicate on the "alias" field.
func AliasLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldAlias, v))
}

// AliasLTE applies the LTE predicate on the "alias" field.
func AliasLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldAlias, v))
}

// AliasContains applies the Contains predicate on the "alias" field.
func AliasContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldAlias, v))
}

// AliasHasPrefix applies the HasPrefix predicate on the "alias" field.
func AliasHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldAlias, v))
}

// AliasHasSuffix applies the HasSuffix predicate on the "alias" field.
func AliasHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldAlias, v))
}

// AliasEqualFold applies the EqualFold predicate on the "alias" field.
func AliasEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldAlias, v))
}

// AliasContainsFold applies the ContainsFold predicate on the "alias" field.
func AliasContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldAlias, v))
}

// TelephoneEQ applies the EQ predicate on the "telephone" field.
func TelephoneEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldTelephone, v))
}

// TelephoneNEQ applies the NEQ predicate on the "telephone" field.
func TelephoneNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldTelephone, v))
}

// TelephoneIn applies the In predicate on the "telephone" field.
func TelephoneIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldTelephone, vs...))
}

// TelephoneNotIn applies the NotIn predicate on the "telephone" field.
func TelephoneNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldTelephone, vs...))
}

// TelephoneGT applies the GT predicate on the "telephone" field.
func TelephoneGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldTelephone, v))
}

// TelephoneGTE applies the GTE predicate on the "telephone" field.
func TelephoneGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldTelephone, v))
}

// TelephoneLT applies the LT predicate on the "telephone" field.
func TelephoneLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldTelephone, v))
}

// TelephoneLTE applies the LTE predicate on the "telephone" field.
func TelephoneLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldTelephone, v))
}

// TelephoneContains applies the Contains predicate on the "telephone" field.
func TelephoneContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldTelephone, v))
}

// TelephoneHasPrefix applies the HasPrefix predicate on the "telephone" field.
func TelephoneHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldTelephone, v))
}

// TelephoneHasSuffix applies the HasSuffix predicate on the "telephone" field.
func TelephoneHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldTelephone, v))
}

// TelephoneIsNil applies the IsNil predicate on the "telephone" field.
func TelephoneIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldTelephone))
}

// TelephoneNotNil applies the NotNil predicate on the "telephone" field.
func TelephoneNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldTelephone))
}

// TelephoneEqualFold applies the EqualFold predicate on the "telephone" field.
func TelephoneEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldTelephone, v))
}

// TelephoneContainsFold applies the ContainsFold predicate on the "telephone" field.
func TelephoneContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldTelephone, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldEmail, v))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldWebsite, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldComment, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldActive, v))
}

// HasAddresses applies the HasEdge predicate on the "addresses" edge.
func HasAddresses() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AddressesTable, AddressesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressesWith applies the HasEdge predicate on the "addresses" edge with a given conditions (other predicates).
func HasAddressesWith(preds ...predicate.Address) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newAddressesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Business) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Business) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Business) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		p(s.Not())
	})
}
