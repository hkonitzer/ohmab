// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"hynie.de/ohmab/ent/address"
	"hynie.de/ohmab/ent/business"
	"hynie.de/ohmab/ent/tag"
	"hynie.de/ohmab/ent/user"
)

// BusinessCreate is the builder for creating a Business entity.
type BusinessCreate struct {
	config
	mutation *BusinessMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BusinessCreate) SetCreatedAt(t time.Time) *BusinessCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableCreatedAt(t *time.Time) *BusinessCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BusinessCreate) SetUpdatedAt(t time.Time) *BusinessCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableUpdatedAt(t *time.Time) *BusinessCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BusinessCreate) SetDeletedAt(t time.Time) *BusinessCreate {
	bc.mutation.SetDeletedAt(t)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableDeletedAt(t *time.Time) *BusinessCreate {
	if t != nil {
		bc.SetDeletedAt(*t)
	}
	return bc
}

// SetName1 sets the "name1" field.
func (bc *BusinessCreate) SetName1(s string) *BusinessCreate {
	bc.mutation.SetName1(s)
	return bc
}

// SetName2 sets the "name2" field.
func (bc *BusinessCreate) SetName2(s string) *BusinessCreate {
	bc.mutation.SetName2(s)
	return bc
}

// SetNillableName2 sets the "name2" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableName2(s *string) *BusinessCreate {
	if s != nil {
		bc.SetName2(*s)
	}
	return bc
}

// SetTelephone sets the "telephone" field.
func (bc *BusinessCreate) SetTelephone(s string) *BusinessCreate {
	bc.mutation.SetTelephone(s)
	return bc
}

// SetNillableTelephone sets the "telephone" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableTelephone(s *string) *BusinessCreate {
	if s != nil {
		bc.SetTelephone(*s)
	}
	return bc
}

// SetEmail sets the "email" field.
func (bc *BusinessCreate) SetEmail(s string) *BusinessCreate {
	bc.mutation.SetEmail(s)
	return bc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableEmail(s *string) *BusinessCreate {
	if s != nil {
		bc.SetEmail(*s)
	}
	return bc
}

// SetWebsite sets the "website" field.
func (bc *BusinessCreate) SetWebsite(s string) *BusinessCreate {
	bc.mutation.SetWebsite(s)
	return bc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableWebsite(s *string) *BusinessCreate {
	if s != nil {
		bc.SetWebsite(*s)
	}
	return bc
}

// SetComment sets the "comment" field.
func (bc *BusinessCreate) SetComment(s string) *BusinessCreate {
	bc.mutation.SetComment(s)
	return bc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableComment(s *string) *BusinessCreate {
	if s != nil {
		bc.SetComment(*s)
	}
	return bc
}

// SetActive sets the "active" field.
func (bc *BusinessCreate) SetActive(b bool) *BusinessCreate {
	bc.mutation.SetActive(b)
	return bc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableActive(b *bool) *BusinessCreate {
	if b != nil {
		bc.SetActive(*b)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BusinessCreate) SetID(u uuid.UUID) *BusinessCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableID(u *uuid.UUID) *BusinessCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// AddAddressIDs adds the "addresses" edge to the Address entity by IDs.
func (bc *BusinessCreate) AddAddressIDs(ids ...uuid.UUID) *BusinessCreate {
	bc.mutation.AddAddressIDs(ids...)
	return bc
}

// AddAddresses adds the "addresses" edges to the Address entity.
func (bc *BusinessCreate) AddAddresses(a ...*Address) *BusinessCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bc.AddAddressIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (bc *BusinessCreate) AddTagIDs(ids ...uuid.UUID) *BusinessCreate {
	bc.mutation.AddTagIDs(ids...)
	return bc
}

// AddTags adds the "tags" edges to the Tag entity.
func (bc *BusinessCreate) AddTags(t ...*Tag) *BusinessCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bc.AddTagIDs(ids...)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (bc *BusinessCreate) SetUsersID(id uuid.UUID) *BusinessCreate {
	bc.mutation.SetUsersID(id)
	return bc
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (bc *BusinessCreate) SetNillableUsersID(id *uuid.UUID) *BusinessCreate {
	if id != nil {
		bc = bc.SetUsersID(*id)
	}
	return bc
}

// SetUsers sets the "users" edge to the User entity.
func (bc *BusinessCreate) SetUsers(u *User) *BusinessCreate {
	return bc.SetUsersID(u.ID)
}

// Mutation returns the BusinessMutation object of the builder.
func (bc *BusinessCreate) Mutation() *BusinessMutation {
	return bc.mutation
}

// Save creates the Business in the database.
func (bc *BusinessCreate) Save(ctx context.Context) (*Business, error) {
	if err := bc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BusinessCreate) SaveX(ctx context.Context) *Business {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BusinessCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BusinessCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BusinessCreate) defaults() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		if business.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized business.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := business.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		if business.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized business.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := business.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.Active(); !ok {
		v := business.DefaultActive
		bc.mutation.SetActive(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		if business.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized business.DefaultID (forgotten import ent/runtime?)")
		}
		v := business.DefaultID()
		bc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bc *BusinessCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Business.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Business.updated_at"`)}
	}
	if _, ok := bc.mutation.Name1(); !ok {
		return &ValidationError{Name: "name1", err: errors.New(`ent: missing required field "Business.name1"`)}
	}
	if v, ok := bc.mutation.Name1(); ok {
		if err := business.Name1Validator(v); err != nil {
			return &ValidationError{Name: "name1", err: fmt.Errorf(`ent: validator failed for field "Business.name1": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "Business.active"`)}
	}
	return nil
}

func (bc *BusinessCreate) sqlSave(ctx context.Context) (*Business, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BusinessCreate) createSpec() (*Business, *sqlgraph.CreateSpec) {
	var (
		_node = &Business{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(business.Table, sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(business.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(business.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.SetField(business.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := bc.mutation.Name1(); ok {
		_spec.SetField(business.FieldName1, field.TypeString, value)
		_node.Name1 = value
	}
	if value, ok := bc.mutation.Name2(); ok {
		_spec.SetField(business.FieldName2, field.TypeString, value)
		_node.Name2 = value
	}
	if value, ok := bc.mutation.Telephone(); ok {
		_spec.SetField(business.FieldTelephone, field.TypeString, value)
		_node.Telephone = value
	}
	if value, ok := bc.mutation.Email(); ok {
		_spec.SetField(business.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := bc.mutation.Website(); ok {
		_spec.SetField(business.FieldWebsite, field.TypeString, value)
		_node.Website = value
	}
	if value, ok := bc.mutation.Comment(); ok {
		_spec.SetField(business.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := bc.mutation.Active(); ok {
		_spec.SetField(business.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if nodes := bc.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   business.AddressesTable,
			Columns: business.AddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   business.TagsTable,
			Columns: business.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   business.UsersTable,
			Columns: []string{business.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_businesses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusinessCreateBulk is the builder for creating many Business entities in bulk.
type BusinessCreateBulk struct {
	config
	builders []*BusinessCreate
}

// Save creates the Business entities in the database.
func (bcb *BusinessCreateBulk) Save(ctx context.Context) ([]*Business, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Business, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BusinessCreateBulk) SaveX(ctx context.Context) []*Business {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BusinessCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BusinessCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
