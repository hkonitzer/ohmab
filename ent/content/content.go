// OHMAB
// Code generated by entc, DO NOT EDIT.

package content

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the content type in the database.
	Label = "content"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldTimetableType holds the string denoting the timetable_type field in the database.
	FieldTimetableType = "timetable_type"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// Table holds the table name of the content in the database.
	Table = "contents"
)

// Columns holds all SQL columns for content fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldTimetableType,
	FieldType,
	FieldLocale,
	FieldLocation,
	FieldContent,
	FieldStatus,
	FieldPublishedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/hkonitzer/ohmab/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultLocale holds the default value on creation for the "locale" field.
	DefaultLocale string
	// LocaleValidator is a validator for the "locale" field. It is called by the builders before save.
	LocaleValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// TimetableType defines the type for the "timetable_type" enum field.
type TimetableType string

// TimetableTypeDEFAULT is the default value of the TimetableType enum.
const DefaultTimetableType = TimetableTypeDEFAULT

// TimetableType values.
const (
	TimetableTypeDEFAULT          TimetableType = "DEFAULT"
	TimetableTypeREGULAR          TimetableType = "REGULAR"
	TimetableTypeCLOSED           TimetableType = "CLOSED"
	TimetableTypeEMERGENCYSERVICE TimetableType = "EMERGENCYSERVICE"
	TimetableTypeHOLIDAY          TimetableType = "HOLIDAY"
	TimetableTypeSPECIAL          TimetableType = "SPECIAL"
)

func (tt TimetableType) String() string {
	return string(tt)
}

// TimetableTypeValidator is a validator for the "timetable_type" field enum values. It is called by the builders before save.
func TimetableTypeValidator(tt TimetableType) error {
	switch tt {
	case TimetableTypeDEFAULT, TimetableTypeREGULAR, TimetableTypeCLOSED, TimetableTypeEMERGENCYSERVICE, TimetableTypeHOLIDAY, TimetableTypeSPECIAL:
		return nil
	default:
		return fmt.Errorf("content: invalid enum value for timetable_type field: %q", tt)
	}
}

// Type defines the type for the "type" enum field.
type Type string

// TypeTEXT is the default value of the Type enum.
const DefaultType = TypeTEXT

// Type values.
const (
	TypeTEXT  Type = "TEXT"
	TypeHTML  Type = "HTML"
	TypeCSS   Type = "CSS"
	TypeOTHER Type = "OTHER"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeTEXT, TypeHTML, TypeCSS, TypeOTHER:
		return nil
	default:
		return fmt.Errorf("content: invalid enum value for type field: %q", _type)
	}
}

// Location defines the type for the "location" enum field.
type Location string

// LocationTOP is the default value of the Location enum.
const DefaultLocation = LocationTOP

// Location values.
const (
	LocationTOP    Location = "TOP"
	LocationBOTTOM Location = "BOTTOM"
)

func (l Location) String() string {
	return string(l)
}

// LocationValidator is a validator for the "location" field enum values. It is called by the builders before save.
func LocationValidator(l Location) error {
	switch l {
	case LocationTOP, LocationBOTTOM:
		return nil
	default:
		return fmt.Errorf("content: invalid enum value for location field: %q", l)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusDRAFT is the default value of the Status enum.
const DefaultStatus = StatusDRAFT

// Status values.
const (
	StatusDRAFT     Status = "DRAFT"
	StatusPUBLISHED Status = "PUBLISHED"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDRAFT, StatusPUBLISHED:
		return nil
	default:
		return fmt.Errorf("content: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Content queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTimetableType orders the results by the timetable_type field.
func ByTimetableType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimetableType, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPublishedAt orders the results by the published_at field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// MarshalGQL implements graphql.Marshaler interface.
func (e TimetableType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *TimetableType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = TimetableType(str)
	if err := TimetableTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid TimetableType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Type(str)
	if err := TypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Location) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Location) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Location(str)
	if err := LocationValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Location", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
