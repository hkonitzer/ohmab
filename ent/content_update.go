// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hkonitzer/ohmab/ent/content"
	"github.com/hkonitzer/ohmab/ent/predicate"
)

// ContentUpdate is the builder for updating Content entities.
type ContentUpdate struct {
	config
	hooks    []Hook
	mutation *ContentMutation
}

// Where appends a list predicates to the ContentUpdate builder.
func (cu *ContentUpdate) Where(ps ...predicate.Content) *ContentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ContentUpdate) SetUpdatedAt(t time.Time) *ContentUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ContentUpdate) SetDeletedAt(t time.Time) *ContentUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableDeletedAt(t *time.Time) *ContentUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *ContentUpdate) ClearDeletedAt() *ContentUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetTimetableType sets the "timetable_type" field.
func (cu *ContentUpdate) SetTimetableType(ct content.TimetableType) *ContentUpdate {
	cu.mutation.SetTimetableType(ct)
	return cu
}

// SetNillableTimetableType sets the "timetable_type" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableTimetableType(ct *content.TimetableType) *ContentUpdate {
	if ct != nil {
		cu.SetTimetableType(*ct)
	}
	return cu
}

// SetType sets the "type" field.
func (cu *ContentUpdate) SetType(c content.Type) *ContentUpdate {
	cu.mutation.SetType(c)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableType(c *content.Type) *ContentUpdate {
	if c != nil {
		cu.SetType(*c)
	}
	return cu
}

// SetLocale sets the "locale" field.
func (cu *ContentUpdate) SetLocale(s string) *ContentUpdate {
	cu.mutation.SetLocale(s)
	return cu
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableLocale(s *string) *ContentUpdate {
	if s != nil {
		cu.SetLocale(*s)
	}
	return cu
}

// SetLocation sets the "location" field.
func (cu *ContentUpdate) SetLocation(c content.Location) *ContentUpdate {
	cu.mutation.SetLocation(c)
	return cu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableLocation(c *content.Location) *ContentUpdate {
	if c != nil {
		cu.SetLocation(*c)
	}
	return cu
}

// SetContent sets the "content" field.
func (cu *ContentUpdate) SetContent(s string) *ContentUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetStatus sets the "status" field.
func (cu *ContentUpdate) SetStatus(c content.Status) *ContentUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableStatus(c *content.Status) *ContentUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// SetPublishedAt sets the "published_at" field.
func (cu *ContentUpdate) SetPublishedAt(t time.Time) *ContentUpdate {
	cu.mutation.SetPublishedAt(t)
	return cu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (cu *ContentUpdate) SetNillablePublishedAt(t *time.Time) *ContentUpdate {
	if t != nil {
		cu.SetPublishedAt(*t)
	}
	return cu
}

// ClearPublishedAt clears the value of the "published_at" field.
func (cu *ContentUpdate) ClearPublishedAt() *ContentUpdate {
	cu.mutation.ClearPublishedAt()
	return cu
}

// Mutation returns the ContentMutation object of the builder.
func (cu *ContentUpdate) Mutation() *ContentMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContentUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContentUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if content.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized content.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := content.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContentUpdate) check() error {
	if v, ok := cu.mutation.TimetableType(); ok {
		if err := content.TimetableTypeValidator(v); err != nil {
			return &ValidationError{Name: "timetable_type", err: fmt.Errorf(`ent: validator failed for field "Content.timetable_type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.GetType(); ok {
		if err := content.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Content.type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Locale(); ok {
		if err := content.LocaleValidator(v); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "Content.locale": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Location(); ok {
		if err := content.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Content.location": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := content.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Content.status": %w`, err)}
		}
	}
	return nil
}

func (cu *ContentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(content.Table, content.Columns, sqlgraph.NewFieldSpec(content.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(content.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(content.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(content.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.TimetableType(); ok {
		_spec.SetField(content.FieldTimetableType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(content.FieldType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Locale(); ok {
		_spec.SetField(content.FieldLocale, field.TypeString, value)
	}
	if value, ok := cu.mutation.Location(); ok {
		_spec.SetField(content.FieldLocation, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(content.FieldContent, field.TypeString, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(content.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.PublishedAt(); ok {
		_spec.SetField(content.FieldPublishedAt, field.TypeTime, value)
	}
	if cu.mutation.PublishedAtCleared() {
		_spec.ClearField(content.FieldPublishedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{content.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContentUpdateOne is the builder for updating a single Content entity.
type ContentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ContentUpdateOne) SetUpdatedAt(t time.Time) *ContentUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ContentUpdateOne) SetDeletedAt(t time.Time) *ContentUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableDeletedAt(t *time.Time) *ContentUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *ContentUpdateOne) ClearDeletedAt() *ContentUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetTimetableType sets the "timetable_type" field.
func (cuo *ContentUpdateOne) SetTimetableType(ct content.TimetableType) *ContentUpdateOne {
	cuo.mutation.SetTimetableType(ct)
	return cuo
}

// SetNillableTimetableType sets the "timetable_type" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableTimetableType(ct *content.TimetableType) *ContentUpdateOne {
	if ct != nil {
		cuo.SetTimetableType(*ct)
	}
	return cuo
}

// SetType sets the "type" field.
func (cuo *ContentUpdateOne) SetType(c content.Type) *ContentUpdateOne {
	cuo.mutation.SetType(c)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableType(c *content.Type) *ContentUpdateOne {
	if c != nil {
		cuo.SetType(*c)
	}
	return cuo
}

// SetLocale sets the "locale" field.
func (cuo *ContentUpdateOne) SetLocale(s string) *ContentUpdateOne {
	cuo.mutation.SetLocale(s)
	return cuo
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableLocale(s *string) *ContentUpdateOne {
	if s != nil {
		cuo.SetLocale(*s)
	}
	return cuo
}

// SetLocation sets the "location" field.
func (cuo *ContentUpdateOne) SetLocation(c content.Location) *ContentUpdateOne {
	cuo.mutation.SetLocation(c)
	return cuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableLocation(c *content.Location) *ContentUpdateOne {
	if c != nil {
		cuo.SetLocation(*c)
	}
	return cuo
}

// SetContent sets the "content" field.
func (cuo *ContentUpdateOne) SetContent(s string) *ContentUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ContentUpdateOne) SetStatus(c content.Status) *ContentUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableStatus(c *content.Status) *ContentUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// SetPublishedAt sets the "published_at" field.
func (cuo *ContentUpdateOne) SetPublishedAt(t time.Time) *ContentUpdateOne {
	cuo.mutation.SetPublishedAt(t)
	return cuo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillablePublishedAt(t *time.Time) *ContentUpdateOne {
	if t != nil {
		cuo.SetPublishedAt(*t)
	}
	return cuo
}

// ClearPublishedAt clears the value of the "published_at" field.
func (cuo *ContentUpdateOne) ClearPublishedAt() *ContentUpdateOne {
	cuo.mutation.ClearPublishedAt()
	return cuo
}

// Mutation returns the ContentMutation object of the builder.
func (cuo *ContentUpdateOne) Mutation() *ContentMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ContentUpdate builder.
func (cuo *ContentUpdateOne) Where(ps ...predicate.Content) *ContentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContentUpdateOne) Select(field string, fields ...string) *ContentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Content entity.
func (cuo *ContentUpdateOne) Save(ctx context.Context) (*Content, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContentUpdateOne) SaveX(ctx context.Context) *Content {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContentUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if content.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized content.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := content.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContentUpdateOne) check() error {
	if v, ok := cuo.mutation.TimetableType(); ok {
		if err := content.TimetableTypeValidator(v); err != nil {
			return &ValidationError{Name: "timetable_type", err: fmt.Errorf(`ent: validator failed for field "Content.timetable_type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.GetType(); ok {
		if err := content.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Content.type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Locale(); ok {
		if err := content.LocaleValidator(v); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "Content.locale": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Location(); ok {
		if err := content.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Content.location": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := content.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Content.status": %w`, err)}
		}
	}
	return nil
}

func (cuo *ContentUpdateOne) sqlSave(ctx context.Context) (_node *Content, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(content.Table, content.Columns, sqlgraph.NewFieldSpec(content.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Content.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, content.FieldID)
		for _, f := range fields {
			if !content.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != content.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(content.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(content.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(content.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.TimetableType(); ok {
		_spec.SetField(content.FieldTimetableType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(content.FieldType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Locale(); ok {
		_spec.SetField(content.FieldLocale, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Location(); ok {
		_spec.SetField(content.FieldLocation, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(content.FieldContent, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(content.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.PublishedAt(); ok {
		_spec.SetField(content.FieldPublishedAt, field.TypeTime, value)
	}
	if cuo.mutation.PublishedAtCleared() {
		_spec.ClearField(content.FieldPublishedAt, field.TypeTime)
	}
	_node = &Content{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{content.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
