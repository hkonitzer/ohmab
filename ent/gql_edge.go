// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Address) Business(ctx context.Context) (result []*Business, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedBusiness(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.BusinessOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryBusiness().All(ctx)
	}
	return result, err
}

func (a *Address) Timetables(ctx context.Context) (result []*Timetable, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedTimetables(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.TimetablesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryTimetables().All(ctx)
	}
	return result, err
}

func (b *Business) Addresses(ctx context.Context) (result []*Address, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedAddresses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.AddressesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryAddresses().All(ctx)
	}
	return result, err
}

func (b *Business) Tags(ctx context.Context) (result []*Tag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedTags(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.TagsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryTags().All(ctx)
	}
	return result, err
}

func (b *Business) Users(ctx context.Context) (*User, error) {
	result, err := b.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = b.QueryUsers().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Tag) Business(ctx context.Context) (result []*Business, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedBusiness(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.BusinessOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryBusiness().All(ctx)
	}
	return result, err
}

func (t *Tag) User(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedUser(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.UserOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryUser().All(ctx)
	}
	return result, err
}

func (t *Timetable) Address(ctx context.Context) (*Address, error) {
	result, err := t.Edges.AddressOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryAddress().Only(ctx)
	}
	return result, err
}

func (t *Timetable) UsersOnDuty(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedUsersOnDuty(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.UsersOnDutyOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryUsersOnDuty().All(ctx)
	}
	return result, err
}

func (u *User) Businesses(ctx context.Context) (result []*Business, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedBusinesses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.BusinessesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryBusinesses().All(ctx)
	}
	return result, err
}

func (u *User) Tags(ctx context.Context) (result []*Tag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedTags(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.TagsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryTags().All(ctx)
	}
	return result, err
}

func (u *User) Timetable(ctx context.Context) (result []*Timetable, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedTimetable(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.TimetableOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryTimetable().All(ctx)
	}
	return result, err
}
