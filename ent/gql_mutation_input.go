// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/hkonitzer/ohmab/ent/timetable"
)

// CreateAddressInput represents a mutation input for creating addresses.
type CreateAddressInput struct {
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	DeletedAt    *time.Time
	Addition     *string
	Street       *string
	City         *string
	Zip          *string
	State        *string
	Country      *string
	Locale       *string
	Primary      *bool
	Telephone    *string
	Comment      *string
	BusinessID   *uuid.UUID
	TimetableIDs []uuid.UUID
}

// Mutate applies the CreateAddressInput on the AddressMutation builder.
func (i *CreateAddressInput) Mutate(m *AddressMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Addition; v != nil {
		m.SetAddition(*v)
	}
	if v := i.Street; v != nil {
		m.SetStreet(*v)
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if v := i.Zip; v != nil {
		m.SetZip(*v)
	}
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if v := i.Locale; v != nil {
		m.SetLocale(*v)
	}
	if v := i.Primary; v != nil {
		m.SetPrimary(*v)
	}
	if v := i.Telephone; v != nil {
		m.SetTelephone(*v)
	}
	if v := i.Comment; v != nil {
		m.SetComment(*v)
	}
	if v := i.BusinessID; v != nil {
		m.SetBusinessID(*v)
	}
	if v := i.TimetableIDs; len(v) > 0 {
		m.AddTimetableIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAddressInput on the AddressCreate builder.
func (c *AddressCreate) SetInput(i CreateAddressInput) *AddressCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAddressInput represents a mutation input for updating addresses.
type UpdateAddressInput struct {
	UpdatedAt          *time.Time
	ClearDeletedAt     bool
	DeletedAt          *time.Time
	ClearAddition      bool
	Addition           *string
	ClearStreet        bool
	Street             *string
	ClearCity          bool
	City               *string
	ClearZip           bool
	Zip                *string
	ClearState         bool
	State              *string
	ClearCountry       bool
	Country            *string
	Locale             *string
	Primary            *bool
	ClearTelephone     bool
	Telephone          *string
	ClearComment       bool
	Comment            *string
	ClearBusiness      bool
	BusinessID         *uuid.UUID
	ClearTimetables    bool
	AddTimetableIDs    []uuid.UUID
	RemoveTimetableIDs []uuid.UUID
}

// Mutate applies the UpdateAddressInput on the AddressMutation builder.
func (i *UpdateAddressInput) Mutate(m *AddressMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearAddition {
		m.ClearAddition()
	}
	if v := i.Addition; v != nil {
		m.SetAddition(*v)
	}
	if i.ClearStreet {
		m.ClearStreet()
	}
	if v := i.Street; v != nil {
		m.SetStreet(*v)
	}
	if i.ClearCity {
		m.ClearCity()
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if i.ClearZip {
		m.ClearZip()
	}
	if v := i.Zip; v != nil {
		m.SetZip(*v)
	}
	if i.ClearState {
		m.ClearState()
	}
	if v := i.State; v != nil {
		m.SetState(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if v := i.Locale; v != nil {
		m.SetLocale(*v)
	}
	if v := i.Primary; v != nil {
		m.SetPrimary(*v)
	}
	if i.ClearTelephone {
		m.ClearTelephone()
	}
	if v := i.Telephone; v != nil {
		m.SetTelephone(*v)
	}
	if i.ClearComment {
		m.ClearComment()
	}
	if v := i.Comment; v != nil {
		m.SetComment(*v)
	}
	if i.ClearBusiness {
		m.ClearBusiness()
	}
	if v := i.BusinessID; v != nil {
		m.SetBusinessID(*v)
	}
	if i.ClearTimetables {
		m.ClearTimetables()
	}
	if v := i.AddTimetableIDs; len(v) > 0 {
		m.AddTimetableIDs(v...)
	}
	if v := i.RemoveTimetableIDs; len(v) > 0 {
		m.RemoveTimetableIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateAddressInput on the AddressUpdate builder.
func (c *AddressUpdate) SetInput(i UpdateAddressInput) *AddressUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAddressInput on the AddressUpdateOne builder.
func (c *AddressUpdateOne) SetInput(i UpdateAddressInput) *AddressUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateBusinessInput represents a mutation input for creating businesses.
type CreateBusinessInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	DeletedAt   *time.Time
	Name1       string
	Name2       *string
	Alias       string
	Telephone   *string
	Email       *string
	Website     *string
	Comment     *string
	Active      *bool
	AddressIDs  []uuid.UUID
	TagIDs      []uuid.UUID
	UserIDs     []uuid.UUID
	OperatorIDs []uuid.UUID
}

// Mutate applies the CreateBusinessInput on the BusinessMutation builder.
func (i *CreateBusinessInput) Mutate(m *BusinessMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetName1(i.Name1)
	if v := i.Name2; v != nil {
		m.SetName2(*v)
	}
	m.SetAlias(i.Alias)
	if v := i.Telephone; v != nil {
		m.SetTelephone(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Website; v != nil {
		m.SetWebsite(*v)
	}
	if v := i.Comment; v != nil {
		m.SetComment(*v)
	}
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	if v := i.AddressIDs; len(v) > 0 {
		m.AddAddressIDs(v...)
	}
	if v := i.TagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.OperatorIDs; len(v) > 0 {
		m.AddOperatorIDs(v...)
	}
}

// SetInput applies the change-set in the CreateBusinessInput on the BusinessCreate builder.
func (c *BusinessCreate) SetInput(i CreateBusinessInput) *BusinessCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBusinessInput represents a mutation input for updating businesses.
type UpdateBusinessInput struct {
	UpdatedAt         *time.Time
	ClearDeletedAt    bool
	DeletedAt         *time.Time
	Name1             *string
	ClearName2        bool
	Name2             *string
	Alias             *string
	ClearTelephone    bool
	Telephone         *string
	ClearEmail        bool
	Email             *string
	ClearWebsite      bool
	Website           *string
	ClearComment      bool
	Comment           *string
	Active            *bool
	ClearAddresses    bool
	AddAddressIDs     []uuid.UUID
	RemoveAddressIDs  []uuid.UUID
	ClearTags         bool
	AddTagIDs         []uuid.UUID
	RemoveTagIDs      []uuid.UUID
	ClearUsers        bool
	AddUserIDs        []uuid.UUID
	RemoveUserIDs     []uuid.UUID
	ClearOperators    bool
	AddOperatorIDs    []uuid.UUID
	RemoveOperatorIDs []uuid.UUID
}

// Mutate applies the UpdateBusinessInput on the BusinessMutation builder.
func (i *UpdateBusinessInput) Mutate(m *BusinessMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name1; v != nil {
		m.SetName1(*v)
	}
	if i.ClearName2 {
		m.ClearName2()
	}
	if v := i.Name2; v != nil {
		m.SetName2(*v)
	}
	if v := i.Alias; v != nil {
		m.SetAlias(*v)
	}
	if i.ClearTelephone {
		m.ClearTelephone()
	}
	if v := i.Telephone; v != nil {
		m.SetTelephone(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearWebsite {
		m.ClearWebsite()
	}
	if v := i.Website; v != nil {
		m.SetWebsite(*v)
	}
	if i.ClearComment {
		m.ClearComment()
	}
	if v := i.Comment; v != nil {
		m.SetComment(*v)
	}
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	if i.ClearAddresses {
		m.ClearAddresses()
	}
	if v := i.AddAddressIDs; len(v) > 0 {
		m.AddAddressIDs(v...)
	}
	if v := i.RemoveAddressIDs; len(v) > 0 {
		m.RemoveAddressIDs(v...)
	}
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.AddTagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
	if v := i.RemoveTagIDs; len(v) > 0 {
		m.RemoveTagIDs(v...)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearOperators {
		m.ClearOperators()
	}
	if v := i.AddOperatorIDs; len(v) > 0 {
		m.AddOperatorIDs(v...)
	}
	if v := i.RemoveOperatorIDs; len(v) > 0 {
		m.RemoveOperatorIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateBusinessInput on the BusinessUpdate builder.
func (c *BusinessUpdate) SetInput(i UpdateBusinessInput) *BusinessUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBusinessInput on the BusinessUpdateOne builder.
func (c *BusinessUpdateOne) SetInput(i UpdateBusinessInput) *BusinessUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTimetableInput represents a mutation input for creating timetables.
type CreateTimetableInput struct {
	CreatedAt              *time.Time
	UpdatedAt              *time.Time
	DeletedAt              *time.Time
	TimetableType          *timetable.TimetableType
	DatetimeFrom           time.Time
	Duration               *int
	DatetimeTo             *time.Time
	TimeWholeDay           *bool
	Comment                *string
	AvailabilityByPhone    *string
	AvailabilityByEmail    *string
	AvailabilityBySms      *string
	AvailabilityByWhatsapp *string
	AddressID              uuid.UUID
	OperatorsOnDutyIDs     []uuid.UUID
}

// Mutate applies the CreateTimetableInput on the TimetableMutation builder.
func (i *CreateTimetableInput) Mutate(m *TimetableMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.TimetableType; v != nil {
		m.SetTimetableType(*v)
	}
	m.SetDatetimeFrom(i.DatetimeFrom)
	if v := i.Duration; v != nil {
		m.SetDuration(*v)
	}
	if v := i.DatetimeTo; v != nil {
		m.SetDatetimeTo(*v)
	}
	if v := i.TimeWholeDay; v != nil {
		m.SetTimeWholeDay(*v)
	}
	if v := i.Comment; v != nil {
		m.SetComment(*v)
	}
	if v := i.AvailabilityByPhone; v != nil {
		m.SetAvailabilityByPhone(*v)
	}
	if v := i.AvailabilityByEmail; v != nil {
		m.SetAvailabilityByEmail(*v)
	}
	if v := i.AvailabilityBySms; v != nil {
		m.SetAvailabilityBySms(*v)
	}
	if v := i.AvailabilityByWhatsapp; v != nil {
		m.SetAvailabilityByWhatsapp(*v)
	}
	m.SetAddressID(i.AddressID)
	if v := i.OperatorsOnDutyIDs; len(v) > 0 {
		m.AddOperatorsOnDutyIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTimetableInput on the TimetableCreate builder.
func (c *TimetableCreate) SetInput(i CreateTimetableInput) *TimetableCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTimetableInput represents a mutation input for updating timetables.
type UpdateTimetableInput struct {
	UpdatedAt                   *time.Time
	ClearDeletedAt              bool
	DeletedAt                   *time.Time
	TimetableType               *timetable.TimetableType
	DatetimeFrom                *time.Time
	ClearDuration               bool
	Duration                    *int
	ClearDatetimeTo             bool
	DatetimeTo                  *time.Time
	TimeWholeDay                *bool
	ClearComment                bool
	Comment                     *string
	ClearAvailabilityByPhone    bool
	AvailabilityByPhone         *string
	ClearAvailabilityByEmail    bool
	AvailabilityByEmail         *string
	ClearAvailabilityBySms      bool
	AvailabilityBySms           *string
	ClearAvailabilityByWhatsapp bool
	AvailabilityByWhatsapp      *string
	AddressID                   *uuid.UUID
	ClearOperatorsOnDuty        bool
	AddOperatorsOnDutyIDs       []uuid.UUID
	RemoveOperatorsOnDutyIDs    []uuid.UUID
}

// Mutate applies the UpdateTimetableInput on the TimetableMutation builder.
func (i *UpdateTimetableInput) Mutate(m *TimetableMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.TimetableType; v != nil {
		m.SetTimetableType(*v)
	}
	if v := i.DatetimeFrom; v != nil {
		m.SetDatetimeFrom(*v)
	}
	if i.ClearDuration {
		m.ClearDuration()
	}
	if v := i.Duration; v != nil {
		m.SetDuration(*v)
	}
	if i.ClearDatetimeTo {
		m.ClearDatetimeTo()
	}
	if v := i.DatetimeTo; v != nil {
		m.SetDatetimeTo(*v)
	}
	if v := i.TimeWholeDay; v != nil {
		m.SetTimeWholeDay(*v)
	}
	if i.ClearComment {
		m.ClearComment()
	}
	if v := i.Comment; v != nil {
		m.SetComment(*v)
	}
	if i.ClearAvailabilityByPhone {
		m.ClearAvailabilityByPhone()
	}
	if v := i.AvailabilityByPhone; v != nil {
		m.SetAvailabilityByPhone(*v)
	}
	if i.ClearAvailabilityByEmail {
		m.ClearAvailabilityByEmail()
	}
	if v := i.AvailabilityByEmail; v != nil {
		m.SetAvailabilityByEmail(*v)
	}
	if i.ClearAvailabilityBySms {
		m.ClearAvailabilityBySms()
	}
	if v := i.AvailabilityBySms; v != nil {
		m.SetAvailabilityBySms(*v)
	}
	if i.ClearAvailabilityByWhatsapp {
		m.ClearAvailabilityByWhatsapp()
	}
	if v := i.AvailabilityByWhatsapp; v != nil {
		m.SetAvailabilityByWhatsapp(*v)
	}
	if v := i.AddressID; v != nil {
		m.SetAddressID(*v)
	}
	if i.ClearOperatorsOnDuty {
		m.ClearOperatorsOnDuty()
	}
	if v := i.AddOperatorsOnDutyIDs; len(v) > 0 {
		m.AddOperatorsOnDutyIDs(v...)
	}
	if v := i.RemoveOperatorsOnDutyIDs; len(v) > 0 {
		m.RemoveOperatorsOnDutyIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTimetableInput on the TimetableUpdate builder.
func (c *TimetableUpdate) SetInput(i UpdateTimetableInput) *TimetableUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTimetableInput on the TimetableUpdateOne builder.
func (c *TimetableUpdateOne) SetInput(i UpdateTimetableInput) *TimetableUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	DeletedAt    *time.Time
	UsePublicapi *string
	Login        string
	Surname      string
	Firstname    string
	Title        *string
	Email        string
	Passwordhash *string
	Comment      *string
	Active       *bool
	Role         *string
	BusinessIDs  []uuid.UUID
	TagIDs       []uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.UsePublicapi; v != nil {
		m.SetUsePublicapi(*v)
	}
	m.SetLogin(i.Login)
	m.SetSurname(i.Surname)
	m.SetFirstname(i.Firstname)
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	m.SetEmail(i.Email)
	if v := i.Passwordhash; v != nil {
		m.SetPasswordhash(*v)
	}
	if v := i.Comment; v != nil {
		m.SetComment(*v)
	}
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.BusinessIDs; len(v) > 0 {
		m.AddBusinessIDs(v...)
	}
	if v := i.TagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt         *time.Time
	ClearDeletedAt    bool
	DeletedAt         *time.Time
	UsePublicapi      *string
	Login             *string
	Surname           *string
	Firstname         *string
	ClearTitle        bool
	Title             *string
	Email             *string
	ClearPasswordhash bool
	Passwordhash      *string
	ClearComment      bool
	Comment           *string
	Active            *bool
	Role              *string
	ClearBusinesses   bool
	AddBusinessIDs    []uuid.UUID
	RemoveBusinessIDs []uuid.UUID
	ClearTags         bool
	AddTagIDs         []uuid.UUID
	RemoveTagIDs      []uuid.UUID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.UsePublicapi; v != nil {
		m.SetUsePublicapi(*v)
	}
	if v := i.Login; v != nil {
		m.SetLogin(*v)
	}
	if v := i.Surname; v != nil {
		m.SetSurname(*v)
	}
	if v := i.Firstname; v != nil {
		m.SetFirstname(*v)
	}
	if i.ClearTitle {
		m.ClearTitle()
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearPasswordhash {
		m.ClearPasswordhash()
	}
	if v := i.Passwordhash; v != nil {
		m.SetPasswordhash(*v)
	}
	if i.ClearComment {
		m.ClearComment()
	}
	if v := i.Comment; v != nil {
		m.SetComment(*v)
	}
	if v := i.Active; v != nil {
		m.SetActive(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearBusinesses {
		m.ClearBusinesses()
	}
	if v := i.AddBusinessIDs; len(v) > 0 {
		m.AddBusinessIDs(v...)
	}
	if v := i.RemoveBusinessIDs; len(v) > 0 {
		m.RemoveBusinessIDs(v...)
	}
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.AddTagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
	if v := i.RemoveTagIDs; len(v) > 0 {
		m.RemoveTagIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
