// OHMAB
// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AddressesColumns holds the columns for the "addresses" table.
	AddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "addition", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "street", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "city", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "zip", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "state", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "country", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "telephone", Type: field.TypeString, Unique: true, Nullable: true, Size: 2147483647},
		{Name: "comment", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// AddressesTable holds the schema information for the "addresses" table.
	AddressesTable = &schema.Table{
		Name:       "addresses",
		Columns:    AddressesColumns,
		PrimaryKey: []*schema.Column{AddressesColumns[0]},
	}
	// AuditLogsColumns holds the columns for the "audit_logs" table.
	AuditLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "user", Type: field.TypeString, Size: 2147483647},
		{Name: "action", Type: field.TypeString, Size: 2147483647},
		{Name: "entity_schema", Type: field.TypeString, Size: 2147483647},
		{Name: "entity_values", Type: field.TypeJSON, Nullable: true},
		{Name: "entity_uuid", Type: field.TypeString, Nullable: true},
		{Name: "timestamp", Type: field.TypeTime},
	}
	// AuditLogsTable holds the schema information for the "audit_logs" table.
	AuditLogsTable = &schema.Table{
		Name:       "audit_logs",
		Columns:    AuditLogsColumns,
		PrimaryKey: []*schema.Column{AuditLogsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "auditlog_entity_uuid",
				Unique:  false,
				Columns: []*schema.Column{AuditLogsColumns[5]},
			},
		},
	}
	// BusinessesColumns holds the columns for the "businesses" table.
	BusinessesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name1", Type: field.TypeString, Size: 2147483647},
		{Name: "name2", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "telephone", Type: field.TypeString, Unique: true, Nullable: true, Size: 2147483647},
		{Name: "email", Type: field.TypeString, Unique: true, Nullable: true, Size: 2147483647},
		{Name: "website", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "comment", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "user_businesses", Type: field.TypeUUID, Nullable: true},
	}
	// BusinessesTable holds the schema information for the "businesses" table.
	BusinessesTable = &schema.Table{
		Name:       "businesses",
		Columns:    BusinessesColumns,
		PrimaryKey: []*schema.Column{BusinessesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "businesses_users_businesses",
				Columns:    []*schema.Column{BusinessesColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "business_name1_name2",
				Unique:  false,
				Columns: []*schema.Column{BusinessesColumns[4], BusinessesColumns[5]},
			},
			{
				Name:    "business_email",
				Unique:  false,
				Columns: []*schema.Column{BusinessesColumns[7]},
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "comment", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
	}
	// TimetablesColumns holds the columns for the "timetables" table.
	TimetablesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"DEFAULT", "REGULAR", "CLOSED", "EMERGENCYSERVICE", "HOLIDAY", "SPECIAL"}, Default: "DEFAULT"},
		{Name: "datetime_from", Type: field.TypeTime, Nullable: true},
		{Name: "datetime_to", Type: field.TypeTime, Nullable: true},
		{Name: "time_whole_day", Type: field.TypeBool, Default: false},
		{Name: "comment", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "availability_by_phone", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "availability_by_email", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "availability_by_sms", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "availability_by_whatsapp", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "address_timetables", Type: field.TypeUUID},
	}
	// TimetablesTable holds the schema information for the "timetables" table.
	TimetablesTable = &schema.Table{
		Name:       "timetables",
		Columns:    TimetablesColumns,
		PrimaryKey: []*schema.Column{TimetablesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "timetables_addresses_timetables",
				Columns:    []*schema.Column{TimetablesColumns[13]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "timetable_datetime_from",
				Unique:  false,
				Columns: []*schema.Column{TimetablesColumns[5]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "surname", Type: field.TypeString, Size: 2147483647},
		{Name: "firstname", Type: field.TypeString, Size: 2147483647},
		{Name: "title", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 2147483647},
		{Name: "passwordhash", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "comment", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "role", Type: field.TypeInt, Default: 0},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[7]},
			},
		},
	}
	// BusinessAddressesColumns holds the columns for the "business_addresses" table.
	BusinessAddressesColumns = []*schema.Column{
		{Name: "business_id", Type: field.TypeUUID},
		{Name: "address_id", Type: field.TypeUUID},
	}
	// BusinessAddressesTable holds the schema information for the "business_addresses" table.
	BusinessAddressesTable = &schema.Table{
		Name:       "business_addresses",
		Columns:    BusinessAddressesColumns,
		PrimaryKey: []*schema.Column{BusinessAddressesColumns[0], BusinessAddressesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "business_addresses_business_id",
				Columns:    []*schema.Column{BusinessAddressesColumns[0]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "business_addresses_address_id",
				Columns:    []*schema.Column{BusinessAddressesColumns[1]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// BusinessTagsColumns holds the columns for the "business_tags" table.
	BusinessTagsColumns = []*schema.Column{
		{Name: "business_id", Type: field.TypeUUID},
		{Name: "tag_id", Type: field.TypeUUID},
	}
	// BusinessTagsTable holds the schema information for the "business_tags" table.
	BusinessTagsTable = &schema.Table{
		Name:       "business_tags",
		Columns:    BusinessTagsColumns,
		PrimaryKey: []*schema.Column{BusinessTagsColumns[0], BusinessTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "business_tags_business_id",
				Columns:    []*schema.Column{BusinessTagsColumns[0]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "business_tags_tag_id",
				Columns:    []*schema.Column{BusinessTagsColumns[1]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TimetableUsersOnDutyColumns holds the columns for the "timetable_users_on_duty" table.
	TimetableUsersOnDutyColumns = []*schema.Column{
		{Name: "timetable_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// TimetableUsersOnDutyTable holds the schema information for the "timetable_users_on_duty" table.
	TimetableUsersOnDutyTable = &schema.Table{
		Name:       "timetable_users_on_duty",
		Columns:    TimetableUsersOnDutyColumns,
		PrimaryKey: []*schema.Column{TimetableUsersOnDutyColumns[0], TimetableUsersOnDutyColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "timetable_users_on_duty_timetable_id",
				Columns:    []*schema.Column{TimetableUsersOnDutyColumns[0]},
				RefColumns: []*schema.Column{TimetablesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "timetable_users_on_duty_user_id",
				Columns:    []*schema.Column{TimetableUsersOnDutyColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserTagsColumns holds the columns for the "user_tags" table.
	UserTagsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "tag_id", Type: field.TypeUUID},
	}
	// UserTagsTable holds the schema information for the "user_tags" table.
	UserTagsTable = &schema.Table{
		Name:       "user_tags",
		Columns:    UserTagsColumns,
		PrimaryKey: []*schema.Column{UserTagsColumns[0], UserTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_tags_user_id",
				Columns:    []*schema.Column{UserTagsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_tags_tag_id",
				Columns:    []*schema.Column{UserTagsColumns[1]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AddressesTable,
		AuditLogsTable,
		BusinessesTable,
		TagsTable,
		TimetablesTable,
		UsersTable,
		BusinessAddressesTable,
		BusinessTagsTable,
		TimetableUsersOnDutyTable,
		UserTagsTable,
	}
)

func init() {
	BusinessesTable.ForeignKeys[0].RefTable = UsersTable
	TimetablesTable.ForeignKeys[0].RefTable = AddressesTable
	BusinessAddressesTable.ForeignKeys[0].RefTable = BusinessesTable
	BusinessAddressesTable.ForeignKeys[1].RefTable = AddressesTable
	BusinessTagsTable.ForeignKeys[0].RefTable = BusinessesTable
	BusinessTagsTable.ForeignKeys[1].RefTable = TagsTable
	TimetableUsersOnDutyTable.ForeignKeys[0].RefTable = TimetablesTable
	TimetableUsersOnDutyTable.ForeignKeys[1].RefTable = UsersTable
	UserTagsTable.ForeignKeys[0].RefTable = UsersTable
	UserTagsTable.ForeignKeys[1].RefTable = TagsTable
}
