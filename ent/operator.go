// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hkonitzer/ohmab/ent/operator"
)

// Operator is the model entity for the Operator schema.
type Operator struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The surname of a user
	Surname string `json:"surname,omitempty"`
	// The first name of a user
	Firstname string `json:"firstname,omitempty"`
	// The title of a user like PhD
	Title string `json:"title,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperatorQuery when eager-loading is set.
	Edges        OperatorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OperatorEdges holds the relations/edges for other nodes in the graph.
type OperatorEdges struct {
	// The businesses this user is associated with
	Businesses []*Business `json:"businesses,omitempty"`
	// The persons on duty for this timetable entry
	Timetable []*Timetable `json:"timetable,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedBusinesses map[string][]*Business
	namedTimetable  map[string][]*Timetable
}

// BusinessesOrErr returns the Businesses value or an error if the edge
// was not loaded in eager-loading.
func (e OperatorEdges) BusinessesOrErr() ([]*Business, error) {
	if e.loadedTypes[0] {
		return e.Businesses, nil
	}
	return nil, &NotLoadedError{edge: "businesses"}
}

// TimetableOrErr returns the Timetable value or an error if the edge
// was not loaded in eager-loading.
func (e OperatorEdges) TimetableOrErr() ([]*Timetable, error) {
	if e.loadedTypes[1] {
		return e.Timetable, nil
	}
	return nil, &NotLoadedError{edge: "timetable"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operator) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operator.FieldSurname, operator.FieldFirstname, operator.FieldTitle, operator.FieldEmail:
			values[i] = new(sql.NullString)
		case operator.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operator fields.
func (o *Operator) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operator.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case operator.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				o.Surname = value.String
			}
		case operator.FieldFirstname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstname", values[i])
			} else if value.Valid {
				o.Firstname = value.String
			}
		case operator.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				o.Title = value.String
			}
		case operator.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				o.Email = value.String
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Operator.
// This includes values selected through modifiers, order, etc.
func (o *Operator) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryBusinesses queries the "businesses" edge of the Operator entity.
func (o *Operator) QueryBusinesses() *BusinessQuery {
	return NewOperatorClient(o.config).QueryBusinesses(o)
}

// QueryTimetable queries the "timetable" edge of the Operator entity.
func (o *Operator) QueryTimetable() *TimetableQuery {
	return NewOperatorClient(o.config).QueryTimetable(o)
}

// Update returns a builder for updating this Operator.
// Note that you need to call Operator.Unwrap() before calling this method if this Operator
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operator) Update() *OperatorUpdateOne {
	return NewOperatorClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Operator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Operator) Unwrap() *Operator {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operator is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operator) String() string {
	var builder strings.Builder
	builder.WriteString("Operator(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("surname=")
	builder.WriteString(o.Surname)
	builder.WriteString(", ")
	builder.WriteString("firstname=")
	builder.WriteString(o.Firstname)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(o.Title)
	builder.WriteString(", ")
	builder.WriteString("email=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// NamedBusinesses returns the Businesses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Operator) NamedBusinesses(name string) ([]*Business, error) {
	if o.Edges.namedBusinesses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedBusinesses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Operator) appendNamedBusinesses(name string, edges ...*Business) {
	if o.Edges.namedBusinesses == nil {
		o.Edges.namedBusinesses = make(map[string][]*Business)
	}
	if len(edges) == 0 {
		o.Edges.namedBusinesses[name] = []*Business{}
	} else {
		o.Edges.namedBusinesses[name] = append(o.Edges.namedBusinesses[name], edges...)
	}
}

// NamedTimetable returns the Timetable named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Operator) NamedTimetable(name string) ([]*Timetable, error) {
	if o.Edges.namedTimetable == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedTimetable[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Operator) appendNamedTimetable(name string, edges ...*Timetable) {
	if o.Edges.namedTimetable == nil {
		o.Edges.namedTimetable = make(map[string][]*Timetable)
	}
	if len(edges) == 0 {
		o.Edges.namedTimetable[name] = []*Timetable{}
	} else {
		o.Edges.namedTimetable[name] = append(o.Edges.namedTimetable[name], edges...)
	}
}

// Operators is a parsable slice of Operator.
type Operators []*Operator
