// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hkonitzer/ohmab/ent/business"
	"github.com/hkonitzer/ohmab/ent/operator"
	"github.com/hkonitzer/ohmab/ent/timetable"
)

// OperatorCreate is the builder for creating a Operator entity.
type OperatorCreate struct {
	config
	mutation *OperatorMutation
	hooks    []Hook
}

// SetSurname sets the "surname" field.
func (oc *OperatorCreate) SetSurname(s string) *OperatorCreate {
	oc.mutation.SetSurname(s)
	return oc
}

// SetFirstname sets the "firstname" field.
func (oc *OperatorCreate) SetFirstname(s string) *OperatorCreate {
	oc.mutation.SetFirstname(s)
	return oc
}

// SetTitle sets the "title" field.
func (oc *OperatorCreate) SetTitle(s string) *OperatorCreate {
	oc.mutation.SetTitle(s)
	return oc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableTitle(s *string) *OperatorCreate {
	if s != nil {
		oc.SetTitle(*s)
	}
	return oc
}

// SetEmail sets the "email" field.
func (oc *OperatorCreate) SetEmail(s string) *OperatorCreate {
	oc.mutation.SetEmail(s)
	return oc
}

// SetID sets the "id" field.
func (oc *OperatorCreate) SetID(u uuid.UUID) *OperatorCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OperatorCreate) SetNillableID(u *uuid.UUID) *OperatorCreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// AddBusinessIDs adds the "businesses" edge to the Business entity by IDs.
func (oc *OperatorCreate) AddBusinessIDs(ids ...uuid.UUID) *OperatorCreate {
	oc.mutation.AddBusinessIDs(ids...)
	return oc
}

// AddBusinesses adds the "businesses" edges to the Business entity.
func (oc *OperatorCreate) AddBusinesses(b ...*Business) *OperatorCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return oc.AddBusinessIDs(ids...)
}

// AddTimetableIDs adds the "timetable" edge to the Timetable entity by IDs.
func (oc *OperatorCreate) AddTimetableIDs(ids ...uuid.UUID) *OperatorCreate {
	oc.mutation.AddTimetableIDs(ids...)
	return oc
}

// AddTimetable adds the "timetable" edges to the Timetable entity.
func (oc *OperatorCreate) AddTimetable(t ...*Timetable) *OperatorCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oc.AddTimetableIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (oc *OperatorCreate) Mutation() *OperatorMutation {
	return oc.mutation
}

// Save creates the Operator in the database.
func (oc *OperatorCreate) Save(ctx context.Context) (*Operator, error) {
	if err := oc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OperatorCreate) SaveX(ctx context.Context) *Operator {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OperatorCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OperatorCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OperatorCreate) defaults() error {
	if _, ok := oc.mutation.ID(); !ok {
		if operator.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized operator.DefaultID (forgotten import ent/runtime?)")
		}
		v := operator.DefaultID()
		oc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oc *OperatorCreate) check() error {
	if _, ok := oc.mutation.Surname(); !ok {
		return &ValidationError{Name: "surname", err: errors.New(`ent: missing required field "Operator.surname"`)}
	}
	if v, ok := oc.mutation.Surname(); ok {
		if err := operator.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "Operator.surname": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Firstname(); !ok {
		return &ValidationError{Name: "firstname", err: errors.New(`ent: missing required field "Operator.firstname"`)}
	}
	if _, ok := oc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Operator.email"`)}
	}
	return nil
}

func (oc *OperatorCreate) sqlSave(ctx context.Context) (*Operator, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OperatorCreate) createSpec() (*Operator, *sqlgraph.CreateSpec) {
	var (
		_node = &Operator{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(operator.Table, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeUUID))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.Surname(); ok {
		_spec.SetField(operator.FieldSurname, field.TypeString, value)
		_node.Surname = value
	}
	if value, ok := oc.mutation.Firstname(); ok {
		_spec.SetField(operator.FieldFirstname, field.TypeString, value)
		_node.Firstname = value
	}
	if value, ok := oc.mutation.Title(); ok {
		_spec.SetField(operator.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := oc.mutation.Email(); ok {
		_spec.SetField(operator.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if nodes := oc.mutation.BusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.BusinessesTable,
			Columns: operator.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.TimetableIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.TimetableTable,
			Columns: operator.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OperatorCreateBulk is the builder for creating many Operator entities in bulk.
type OperatorCreateBulk struct {
	config
	builders []*OperatorCreate
}

// Save creates the Operator entities in the database.
func (ocb *OperatorCreateBulk) Save(ctx context.Context) ([]*Operator, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Operator, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OperatorCreateBulk) SaveX(ctx context.Context) []*Operator {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OperatorCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OperatorCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
