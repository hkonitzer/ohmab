// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hkonitzer/ohmab/ent/business"
	"github.com/hkonitzer/ohmab/ent/operator"
	"github.com/hkonitzer/ohmab/ent/predicate"
	"github.com/hkonitzer/ohmab/ent/timetable"
)

// OperatorUpdate is the builder for updating Operator entities.
type OperatorUpdate struct {
	config
	hooks    []Hook
	mutation *OperatorMutation
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ou *OperatorUpdate) Where(ps ...predicate.Operator) *OperatorUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetSurname sets the "surname" field.
func (ou *OperatorUpdate) SetSurname(s string) *OperatorUpdate {
	ou.mutation.SetSurname(s)
	return ou
}

// SetFirstname sets the "firstname" field.
func (ou *OperatorUpdate) SetFirstname(s string) *OperatorUpdate {
	ou.mutation.SetFirstname(s)
	return ou
}

// SetTitle sets the "title" field.
func (ou *OperatorUpdate) SetTitle(s string) *OperatorUpdate {
	ou.mutation.SetTitle(s)
	return ou
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableTitle(s *string) *OperatorUpdate {
	if s != nil {
		ou.SetTitle(*s)
	}
	return ou
}

// ClearTitle clears the value of the "title" field.
func (ou *OperatorUpdate) ClearTitle() *OperatorUpdate {
	ou.mutation.ClearTitle()
	return ou
}

// SetEmail sets the "email" field.
func (ou *OperatorUpdate) SetEmail(s string) *OperatorUpdate {
	ou.mutation.SetEmail(s)
	return ou
}

// AddBusinessIDs adds the "businesses" edge to the Business entity by IDs.
func (ou *OperatorUpdate) AddBusinessIDs(ids ...uuid.UUID) *OperatorUpdate {
	ou.mutation.AddBusinessIDs(ids...)
	return ou
}

// AddBusinesses adds the "businesses" edges to the Business entity.
func (ou *OperatorUpdate) AddBusinesses(b ...*Business) *OperatorUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ou.AddBusinessIDs(ids...)
}

// AddTimetableIDs adds the "timetable" edge to the Timetable entity by IDs.
func (ou *OperatorUpdate) AddTimetableIDs(ids ...uuid.UUID) *OperatorUpdate {
	ou.mutation.AddTimetableIDs(ids...)
	return ou
}

// AddTimetable adds the "timetable" edges to the Timetable entity.
func (ou *OperatorUpdate) AddTimetable(t ...*Timetable) *OperatorUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.AddTimetableIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (ou *OperatorUpdate) Mutation() *OperatorMutation {
	return ou.mutation
}

// ClearBusinesses clears all "businesses" edges to the Business entity.
func (ou *OperatorUpdate) ClearBusinesses() *OperatorUpdate {
	ou.mutation.ClearBusinesses()
	return ou
}

// RemoveBusinessIDs removes the "businesses" edge to Business entities by IDs.
func (ou *OperatorUpdate) RemoveBusinessIDs(ids ...uuid.UUID) *OperatorUpdate {
	ou.mutation.RemoveBusinessIDs(ids...)
	return ou
}

// RemoveBusinesses removes "businesses" edges to Business entities.
func (ou *OperatorUpdate) RemoveBusinesses(b ...*Business) *OperatorUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ou.RemoveBusinessIDs(ids...)
}

// ClearTimetable clears all "timetable" edges to the Timetable entity.
func (ou *OperatorUpdate) ClearTimetable() *OperatorUpdate {
	ou.mutation.ClearTimetable()
	return ou
}

// RemoveTimetableIDs removes the "timetable" edge to Timetable entities by IDs.
func (ou *OperatorUpdate) RemoveTimetableIDs(ids ...uuid.UUID) *OperatorUpdate {
	ou.mutation.RemoveTimetableIDs(ids...)
	return ou
}

// RemoveTimetable removes "timetable" edges to Timetable entities.
func (ou *OperatorUpdate) RemoveTimetable(t ...*Timetable) *OperatorUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.RemoveTimetableIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperatorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperatorUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperatorUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperatorUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OperatorUpdate) check() error {
	if v, ok := ou.mutation.Surname(); ok {
		if err := operator.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "Operator.surname": %w`, err)}
		}
	}
	return nil
}

func (ou *OperatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Surname(); ok {
		_spec.SetField(operator.FieldSurname, field.TypeString, value)
	}
	if value, ok := ou.mutation.Firstname(); ok {
		_spec.SetField(operator.FieldFirstname, field.TypeString, value)
	}
	if value, ok := ou.mutation.Title(); ok {
		_spec.SetField(operator.FieldTitle, field.TypeString, value)
	}
	if ou.mutation.TitleCleared() {
		_spec.ClearField(operator.FieldTitle, field.TypeString)
	}
	if value, ok := ou.mutation.Email(); ok {
		_spec.SetField(operator.FieldEmail, field.TypeString, value)
	}
	if ou.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.BusinessesTable,
			Columns: operator.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedBusinessesIDs(); len(nodes) > 0 && !ou.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.BusinessesTable,
			Columns: operator.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.BusinessesTable,
			Columns: operator.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.TimetableCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.TimetableTable,
			Columns: operator.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedTimetableIDs(); len(nodes) > 0 && !ou.mutation.TimetableCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.TimetableTable,
			Columns: operator.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TimetableIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.TimetableTable,
			Columns: operator.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OperatorUpdateOne is the builder for updating a single Operator entity.
type OperatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperatorMutation
}

// SetSurname sets the "surname" field.
func (ouo *OperatorUpdateOne) SetSurname(s string) *OperatorUpdateOne {
	ouo.mutation.SetSurname(s)
	return ouo
}

// SetFirstname sets the "firstname" field.
func (ouo *OperatorUpdateOne) SetFirstname(s string) *OperatorUpdateOne {
	ouo.mutation.SetFirstname(s)
	return ouo
}

// SetTitle sets the "title" field.
func (ouo *OperatorUpdateOne) SetTitle(s string) *OperatorUpdateOne {
	ouo.mutation.SetTitle(s)
	return ouo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableTitle(s *string) *OperatorUpdateOne {
	if s != nil {
		ouo.SetTitle(*s)
	}
	return ouo
}

// ClearTitle clears the value of the "title" field.
func (ouo *OperatorUpdateOne) ClearTitle() *OperatorUpdateOne {
	ouo.mutation.ClearTitle()
	return ouo
}

// SetEmail sets the "email" field.
func (ouo *OperatorUpdateOne) SetEmail(s string) *OperatorUpdateOne {
	ouo.mutation.SetEmail(s)
	return ouo
}

// AddBusinessIDs adds the "businesses" edge to the Business entity by IDs.
func (ouo *OperatorUpdateOne) AddBusinessIDs(ids ...uuid.UUID) *OperatorUpdateOne {
	ouo.mutation.AddBusinessIDs(ids...)
	return ouo
}

// AddBusinesses adds the "businesses" edges to the Business entity.
func (ouo *OperatorUpdateOne) AddBusinesses(b ...*Business) *OperatorUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ouo.AddBusinessIDs(ids...)
}

// AddTimetableIDs adds the "timetable" edge to the Timetable entity by IDs.
func (ouo *OperatorUpdateOne) AddTimetableIDs(ids ...uuid.UUID) *OperatorUpdateOne {
	ouo.mutation.AddTimetableIDs(ids...)
	return ouo
}

// AddTimetable adds the "timetable" edges to the Timetable entity.
func (ouo *OperatorUpdateOne) AddTimetable(t ...*Timetable) *OperatorUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.AddTimetableIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (ouo *OperatorUpdateOne) Mutation() *OperatorMutation {
	return ouo.mutation
}

// ClearBusinesses clears all "businesses" edges to the Business entity.
func (ouo *OperatorUpdateOne) ClearBusinesses() *OperatorUpdateOne {
	ouo.mutation.ClearBusinesses()
	return ouo
}

// RemoveBusinessIDs removes the "businesses" edge to Business entities by IDs.
func (ouo *OperatorUpdateOne) RemoveBusinessIDs(ids ...uuid.UUID) *OperatorUpdateOne {
	ouo.mutation.RemoveBusinessIDs(ids...)
	return ouo
}

// RemoveBusinesses removes "businesses" edges to Business entities.
func (ouo *OperatorUpdateOne) RemoveBusinesses(b ...*Business) *OperatorUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ouo.RemoveBusinessIDs(ids...)
}

// ClearTimetable clears all "timetable" edges to the Timetable entity.
func (ouo *OperatorUpdateOne) ClearTimetable() *OperatorUpdateOne {
	ouo.mutation.ClearTimetable()
	return ouo
}

// RemoveTimetableIDs removes the "timetable" edge to Timetable entities by IDs.
func (ouo *OperatorUpdateOne) RemoveTimetableIDs(ids ...uuid.UUID) *OperatorUpdateOne {
	ouo.mutation.RemoveTimetableIDs(ids...)
	return ouo
}

// RemoveTimetable removes "timetable" edges to Timetable entities.
func (ouo *OperatorUpdateOne) RemoveTimetable(t ...*Timetable) *OperatorUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.RemoveTimetableIDs(ids...)
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ouo *OperatorUpdateOne) Where(ps ...predicate.Operator) *OperatorUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperatorUpdateOne) Select(field string, fields ...string) *OperatorUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operator entity.
func (ouo *OperatorUpdateOne) Save(ctx context.Context) (*Operator, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperatorUpdateOne) SaveX(ctx context.Context) *Operator {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperatorUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperatorUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OperatorUpdateOne) check() error {
	if v, ok := ouo.mutation.Surname(); ok {
		if err := operator.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "Operator.surname": %w`, err)}
		}
	}
	return nil
}

func (ouo *OperatorUpdateOne) sqlSave(ctx context.Context) (_node *Operator, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operator.FieldID)
		for _, f := range fields {
			if !operator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Surname(); ok {
		_spec.SetField(operator.FieldSurname, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Firstname(); ok {
		_spec.SetField(operator.FieldFirstname, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Title(); ok {
		_spec.SetField(operator.FieldTitle, field.TypeString, value)
	}
	if ouo.mutation.TitleCleared() {
		_spec.ClearField(operator.FieldTitle, field.TypeString)
	}
	if value, ok := ouo.mutation.Email(); ok {
		_spec.SetField(operator.FieldEmail, field.TypeString, value)
	}
	if ouo.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.BusinessesTable,
			Columns: operator.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedBusinessesIDs(); len(nodes) > 0 && !ouo.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.BusinessesTable,
			Columns: operator.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.BusinessesTable,
			Columns: operator.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.TimetableCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.TimetableTable,
			Columns: operator.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedTimetableIDs(); len(nodes) > 0 && !ouo.mutation.TimetableCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.TimetableTable,
			Columns: operator.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TimetableIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   operator.TimetableTable,
			Columns: operator.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Operator{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
