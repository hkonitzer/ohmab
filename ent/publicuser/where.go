// OHMAB
// Code generated by entc, DO NOT EDIT.

package publicuser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/hkonitzer/ohmab/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldLTE(FieldID, id))
}

// Surname applies equality check predicate on the "surname" field. It's identical to SurnameEQ.
func Surname(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEQ(FieldSurname, v))
}

// Firstname applies equality check predicate on the "firstname" field. It's identical to FirstnameEQ.
func Firstname(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEQ(FieldFirstname, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEQ(FieldTitle, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEQ(FieldEmail, v))
}

// SurnameEQ applies the EQ predicate on the "surname" field.
func SurnameEQ(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEQ(FieldSurname, v))
}

// SurnameNEQ applies the NEQ predicate on the "surname" field.
func SurnameNEQ(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldNEQ(FieldSurname, v))
}

// SurnameIn applies the In predicate on the "surname" field.
func SurnameIn(vs ...string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldIn(FieldSurname, vs...))
}

// SurnameNotIn applies the NotIn predicate on the "surname" field.
func SurnameNotIn(vs ...string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldNotIn(FieldSurname, vs...))
}

// SurnameGT applies the GT predicate on the "surname" field.
func SurnameGT(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldGT(FieldSurname, v))
}

// SurnameGTE applies the GTE predicate on the "surname" field.
func SurnameGTE(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldGTE(FieldSurname, v))
}

// SurnameLT applies the LT predicate on the "surname" field.
func SurnameLT(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldLT(FieldSurname, v))
}

// SurnameLTE applies the LTE predicate on the "surname" field.
func SurnameLTE(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldLTE(FieldSurname, v))
}

// SurnameContains applies the Contains predicate on the "surname" field.
func SurnameContains(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldContains(FieldSurname, v))
}

// SurnameHasPrefix applies the HasPrefix predicate on the "surname" field.
func SurnameHasPrefix(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldHasPrefix(FieldSurname, v))
}

// SurnameHasSuffix applies the HasSuffix predicate on the "surname" field.
func SurnameHasSuffix(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldHasSuffix(FieldSurname, v))
}

// SurnameEqualFold applies the EqualFold predicate on the "surname" field.
func SurnameEqualFold(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEqualFold(FieldSurname, v))
}

// SurnameContainsFold applies the ContainsFold predicate on the "surname" field.
func SurnameContainsFold(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldContainsFold(FieldSurname, v))
}

// FirstnameEQ applies the EQ predicate on the "firstname" field.
func FirstnameEQ(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEQ(FieldFirstname, v))
}

// FirstnameNEQ applies the NEQ predicate on the "firstname" field.
func FirstnameNEQ(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldNEQ(FieldFirstname, v))
}

// FirstnameIn applies the In predicate on the "firstname" field.
func FirstnameIn(vs ...string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldIn(FieldFirstname, vs...))
}

// FirstnameNotIn applies the NotIn predicate on the "firstname" field.
func FirstnameNotIn(vs ...string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldNotIn(FieldFirstname, vs...))
}

// FirstnameGT applies the GT predicate on the "firstname" field.
func FirstnameGT(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldGT(FieldFirstname, v))
}

// FirstnameGTE applies the GTE predicate on the "firstname" field.
func FirstnameGTE(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldGTE(FieldFirstname, v))
}

// FirstnameLT applies the LT predicate on the "firstname" field.
func FirstnameLT(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldLT(FieldFirstname, v))
}

// FirstnameLTE applies the LTE predicate on the "firstname" field.
func FirstnameLTE(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldLTE(FieldFirstname, v))
}

// FirstnameContains applies the Contains predicate on the "firstname" field.
func FirstnameContains(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldContains(FieldFirstname, v))
}

// FirstnameHasPrefix applies the HasPrefix predicate on the "firstname" field.
func FirstnameHasPrefix(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldHasPrefix(FieldFirstname, v))
}

// FirstnameHasSuffix applies the HasSuffix predicate on the "firstname" field.
func FirstnameHasSuffix(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldHasSuffix(FieldFirstname, v))
}

// FirstnameEqualFold applies the EqualFold predicate on the "firstname" field.
func FirstnameEqualFold(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEqualFold(FieldFirstname, v))
}

// FirstnameContainsFold applies the ContainsFold predicate on the "firstname" field.
func FirstnameContainsFold(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldContainsFold(FieldFirstname, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.PublicUser {
	return predicate.PublicUser(sql.FieldIsNull(FieldTitle))
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.PublicUser {
	return predicate.PublicUser(sql.FieldNotNull(FieldTitle))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldContainsFold(FieldTitle, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.PublicUser {
	return predicate.PublicUser(sql.FieldContainsFold(FieldEmail, v))
}

// HasBusinesses applies the HasEdge predicate on the "businesses" edge.
func HasBusinesses() predicate.PublicUser {
	return predicate.PublicUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BusinessesTable, BusinessesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessesWith applies the HasEdge predicate on the "businesses" edge with a given conditions (other predicates).
func HasBusinessesWith(preds ...predicate.Business) predicate.PublicUser {
	return predicate.PublicUser(func(s *sql.Selector) {
		step := newBusinessesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTimetable applies the HasEdge predicate on the "timetable" edge.
func HasTimetable() predicate.PublicUser {
	return predicate.PublicUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TimetableTable, TimetablePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTimetableWith applies the HasEdge predicate on the "timetable" edge with a given conditions (other predicates).
func HasTimetableWith(preds ...predicate.Timetable) predicate.PublicUser {
	return predicate.PublicUser(func(s *sql.Selector) {
		step := newTimetableStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PublicUser) predicate.PublicUser {
	return predicate.PublicUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PublicUser) predicate.PublicUser {
	return predicate.PublicUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PublicUser) predicate.PublicUser {
	return predicate.PublicUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
