// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hkonitzer/ohmab/ent/business"
	"github.com/hkonitzer/ohmab/ent/predicate"
	"github.com/hkonitzer/ohmab/ent/publicuser"
	"github.com/hkonitzer/ohmab/ent/timetable"
)

// PublicUserQuery is the builder for querying PublicUser entities.
type PublicUserQuery struct {
	config
	ctx                 *QueryContext
	order               []publicuser.OrderOption
	inters              []Interceptor
	predicates          []predicate.PublicUser
	withBusinesses      *BusinessQuery
	withTimetable       *TimetableQuery
	modifiers           []func(*sql.Selector)
	loadTotal           []func(context.Context, []*PublicUser) error
	withNamedBusinesses map[string]*BusinessQuery
	withNamedTimetable  map[string]*TimetableQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PublicUserQuery builder.
func (puq *PublicUserQuery) Where(ps ...predicate.PublicUser) *PublicUserQuery {
	puq.predicates = append(puq.predicates, ps...)
	return puq
}

// Limit the number of records to be returned by this query.
func (puq *PublicUserQuery) Limit(limit int) *PublicUserQuery {
	puq.ctx.Limit = &limit
	return puq
}

// Offset to start from.
func (puq *PublicUserQuery) Offset(offset int) *PublicUserQuery {
	puq.ctx.Offset = &offset
	return puq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (puq *PublicUserQuery) Unique(unique bool) *PublicUserQuery {
	puq.ctx.Unique = &unique
	return puq
}

// Order specifies how the records should be ordered.
func (puq *PublicUserQuery) Order(o ...publicuser.OrderOption) *PublicUserQuery {
	puq.order = append(puq.order, o...)
	return puq
}

// QueryBusinesses chains the current query on the "businesses" edge.
func (puq *PublicUserQuery) QueryBusinesses() *BusinessQuery {
	query := (&BusinessClient{config: puq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := puq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := puq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(publicuser.Table, publicuser.FieldID, selector),
			sqlgraph.To(business.Table, business.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, publicuser.BusinessesTable, publicuser.BusinessesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(puq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTimetable chains the current query on the "timetable" edge.
func (puq *PublicUserQuery) QueryTimetable() *TimetableQuery {
	query := (&TimetableClient{config: puq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := puq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := puq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(publicuser.Table, publicuser.FieldID, selector),
			sqlgraph.To(timetable.Table, timetable.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, publicuser.TimetableTable, publicuser.TimetablePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(puq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PublicUser entity from the query.
// Returns a *NotFoundError when no PublicUser was found.
func (puq *PublicUserQuery) First(ctx context.Context) (*PublicUser, error) {
	nodes, err := puq.Limit(1).All(setContextOp(ctx, puq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{publicuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (puq *PublicUserQuery) FirstX(ctx context.Context) *PublicUser {
	node, err := puq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PublicUser ID from the query.
// Returns a *NotFoundError when no PublicUser ID was found.
func (puq *PublicUserQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = puq.Limit(1).IDs(setContextOp(ctx, puq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{publicuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (puq *PublicUserQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := puq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PublicUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PublicUser entity is found.
// Returns a *NotFoundError when no PublicUser entities are found.
func (puq *PublicUserQuery) Only(ctx context.Context) (*PublicUser, error) {
	nodes, err := puq.Limit(2).All(setContextOp(ctx, puq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{publicuser.Label}
	default:
		return nil, &NotSingularError{publicuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (puq *PublicUserQuery) OnlyX(ctx context.Context) *PublicUser {
	node, err := puq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PublicUser ID in the query.
// Returns a *NotSingularError when more than one PublicUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (puq *PublicUserQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = puq.Limit(2).IDs(setContextOp(ctx, puq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{publicuser.Label}
	default:
		err = &NotSingularError{publicuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (puq *PublicUserQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := puq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PublicUsers.
func (puq *PublicUserQuery) All(ctx context.Context) ([]*PublicUser, error) {
	ctx = setContextOp(ctx, puq.ctx, "All")
	if err := puq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PublicUser, *PublicUserQuery]()
	return withInterceptors[[]*PublicUser](ctx, puq, qr, puq.inters)
}

// AllX is like All, but panics if an error occurs.
func (puq *PublicUserQuery) AllX(ctx context.Context) []*PublicUser {
	nodes, err := puq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PublicUser IDs.
func (puq *PublicUserQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if puq.ctx.Unique == nil && puq.path != nil {
		puq.Unique(true)
	}
	ctx = setContextOp(ctx, puq.ctx, "IDs")
	if err = puq.Select(publicuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (puq *PublicUserQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := puq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (puq *PublicUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, puq.ctx, "Count")
	if err := puq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, puq, querierCount[*PublicUserQuery](), puq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (puq *PublicUserQuery) CountX(ctx context.Context) int {
	count, err := puq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (puq *PublicUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, puq.ctx, "Exist")
	switch _, err := puq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (puq *PublicUserQuery) ExistX(ctx context.Context) bool {
	exist, err := puq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PublicUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (puq *PublicUserQuery) Clone() *PublicUserQuery {
	if puq == nil {
		return nil
	}
	return &PublicUserQuery{
		config:         puq.config,
		ctx:            puq.ctx.Clone(),
		order:          append([]publicuser.OrderOption{}, puq.order...),
		inters:         append([]Interceptor{}, puq.inters...),
		predicates:     append([]predicate.PublicUser{}, puq.predicates...),
		withBusinesses: puq.withBusinesses.Clone(),
		withTimetable:  puq.withTimetable.Clone(),
		// clone intermediate query.
		sql:  puq.sql.Clone(),
		path: puq.path,
	}
}

// WithBusinesses tells the query-builder to eager-load the nodes that are connected to
// the "businesses" edge. The optional arguments are used to configure the query builder of the edge.
func (puq *PublicUserQuery) WithBusinesses(opts ...func(*BusinessQuery)) *PublicUserQuery {
	query := (&BusinessClient{config: puq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	puq.withBusinesses = query
	return puq
}

// WithTimetable tells the query-builder to eager-load the nodes that are connected to
// the "timetable" edge. The optional arguments are used to configure the query builder of the edge.
func (puq *PublicUserQuery) WithTimetable(opts ...func(*TimetableQuery)) *PublicUserQuery {
	query := (&TimetableClient{config: puq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	puq.withTimetable = query
	return puq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Surname string `json:"surname,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PublicUser.Query().
//		GroupBy(publicuser.FieldSurname).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (puq *PublicUserQuery) GroupBy(field string, fields ...string) *PublicUserGroupBy {
	puq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PublicUserGroupBy{build: puq}
	grbuild.flds = &puq.ctx.Fields
	grbuild.label = publicuser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Surname string `json:"surname,omitempty"`
//	}
//
//	client.PublicUser.Query().
//		Select(publicuser.FieldSurname).
//		Scan(ctx, &v)
func (puq *PublicUserQuery) Select(fields ...string) *PublicUserSelect {
	puq.ctx.Fields = append(puq.ctx.Fields, fields...)
	sbuild := &PublicUserSelect{PublicUserQuery: puq}
	sbuild.label = publicuser.Label
	sbuild.flds, sbuild.scan = &puq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PublicUserSelect configured with the given aggregations.
func (puq *PublicUserQuery) Aggregate(fns ...AggregateFunc) *PublicUserSelect {
	return puq.Select().Aggregate(fns...)
}

func (puq *PublicUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range puq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, puq); err != nil {
				return err
			}
		}
	}
	for _, f := range puq.ctx.Fields {
		if !publicuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if puq.path != nil {
		prev, err := puq.path(ctx)
		if err != nil {
			return err
		}
		puq.sql = prev
	}
	if publicuser.Policy == nil {
		return errors.New("ent: uninitialized publicuser.Policy (forgotten import ent/runtime?)")
	}
	if err := publicuser.Policy.EvalQuery(ctx, puq); err != nil {
		return err
	}
	return nil
}

func (puq *PublicUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PublicUser, error) {
	var (
		nodes       = []*PublicUser{}
		_spec       = puq.querySpec()
		loadedTypes = [2]bool{
			puq.withBusinesses != nil,
			puq.withTimetable != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PublicUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PublicUser{config: puq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(puq.modifiers) > 0 {
		_spec.Modifiers = puq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, puq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := puq.withBusinesses; query != nil {
		if err := puq.loadBusinesses(ctx, query, nodes,
			func(n *PublicUser) { n.Edges.Businesses = []*Business{} },
			func(n *PublicUser, e *Business) { n.Edges.Businesses = append(n.Edges.Businesses, e) }); err != nil {
			return nil, err
		}
	}
	if query := puq.withTimetable; query != nil {
		if err := puq.loadTimetable(ctx, query, nodes,
			func(n *PublicUser) { n.Edges.Timetable = []*Timetable{} },
			func(n *PublicUser, e *Timetable) { n.Edges.Timetable = append(n.Edges.Timetable, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range puq.withNamedBusinesses {
		if err := puq.loadBusinesses(ctx, query, nodes,
			func(n *PublicUser) { n.appendNamedBusinesses(name) },
			func(n *PublicUser, e *Business) { n.appendNamedBusinesses(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range puq.withNamedTimetable {
		if err := puq.loadTimetable(ctx, query, nodes,
			func(n *PublicUser) { n.appendNamedTimetable(name) },
			func(n *PublicUser, e *Timetable) { n.appendNamedTimetable(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range puq.loadTotal {
		if err := puq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (puq *PublicUserQuery) loadBusinesses(ctx context.Context, query *BusinessQuery, nodes []*PublicUser, init func(*PublicUser), assign func(*PublicUser, *Business)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*PublicUser)
	nids := make(map[uuid.UUID]map[*PublicUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(publicuser.BusinessesTable)
		s.Join(joinT).On(s.C(business.FieldID), joinT.C(publicuser.BusinessesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(publicuser.BusinessesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(publicuser.BusinessesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*PublicUser]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Business](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "businesses" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (puq *PublicUserQuery) loadTimetable(ctx context.Context, query *TimetableQuery, nodes []*PublicUser, init func(*PublicUser), assign func(*PublicUser, *Timetable)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*PublicUser)
	nids := make(map[uuid.UUID]map[*PublicUser]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(publicuser.TimetableTable)
		s.Join(joinT).On(s.C(timetable.FieldID), joinT.C(publicuser.TimetablePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(publicuser.TimetablePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(publicuser.TimetablePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*PublicUser]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Timetable](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "timetable" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (puq *PublicUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := puq.querySpec()
	if len(puq.modifiers) > 0 {
		_spec.Modifiers = puq.modifiers
	}
	_spec.Node.Columns = puq.ctx.Fields
	if len(puq.ctx.Fields) > 0 {
		_spec.Unique = puq.ctx.Unique != nil && *puq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, puq.driver, _spec)
}

func (puq *PublicUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(publicuser.Table, publicuser.Columns, sqlgraph.NewFieldSpec(publicuser.FieldID, field.TypeUUID))
	_spec.From = puq.sql
	if unique := puq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if puq.path != nil {
		_spec.Unique = true
	}
	if fields := puq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicuser.FieldID)
		for i := range fields {
			if fields[i] != publicuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := puq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := puq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := puq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := puq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (puq *PublicUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(puq.driver.Dialect())
	t1 := builder.Table(publicuser.Table)
	columns := puq.ctx.Fields
	if len(columns) == 0 {
		columns = publicuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if puq.sql != nil {
		selector = puq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if puq.ctx.Unique != nil && *puq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range puq.predicates {
		p(selector)
	}
	for _, p := range puq.order {
		p(selector)
	}
	if offset := puq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := puq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedBusinesses tells the query-builder to eager-load the nodes that are connected to the "businesses"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (puq *PublicUserQuery) WithNamedBusinesses(name string, opts ...func(*BusinessQuery)) *PublicUserQuery {
	query := (&BusinessClient{config: puq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if puq.withNamedBusinesses == nil {
		puq.withNamedBusinesses = make(map[string]*BusinessQuery)
	}
	puq.withNamedBusinesses[name] = query
	return puq
}

// WithNamedTimetable tells the query-builder to eager-load the nodes that are connected to the "timetable"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (puq *PublicUserQuery) WithNamedTimetable(name string, opts ...func(*TimetableQuery)) *PublicUserQuery {
	query := (&TimetableClient{config: puq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if puq.withNamedTimetable == nil {
		puq.withNamedTimetable = make(map[string]*TimetableQuery)
	}
	puq.withNamedTimetable[name] = query
	return puq
}

// PublicUserGroupBy is the group-by builder for PublicUser entities.
type PublicUserGroupBy struct {
	selector
	build *PublicUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pugb *PublicUserGroupBy) Aggregate(fns ...AggregateFunc) *PublicUserGroupBy {
	pugb.fns = append(pugb.fns, fns...)
	return pugb
}

// Scan applies the selector query and scans the result into the given value.
func (pugb *PublicUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pugb.build.ctx, "GroupBy")
	if err := pugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PublicUserQuery, *PublicUserGroupBy](ctx, pugb.build, pugb, pugb.build.inters, v)
}

func (pugb *PublicUserGroupBy) sqlScan(ctx context.Context, root *PublicUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pugb.fns))
	for _, fn := range pugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pugb.flds)+len(pugb.fns))
		for _, f := range *pugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PublicUserSelect is the builder for selecting fields of PublicUser entities.
type PublicUserSelect struct {
	*PublicUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pus *PublicUserSelect) Aggregate(fns ...AggregateFunc) *PublicUserSelect {
	pus.fns = append(pus.fns, fns...)
	return pus
}

// Scan applies the selector query and scans the result into the given value.
func (pus *PublicUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pus.ctx, "Select")
	if err := pus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PublicUserQuery, *PublicUserSelect](ctx, pus.PublicUserQuery, pus, pus.inters, v)
}

func (pus *PublicUserSelect) sqlScan(ctx context.Context, root *PublicUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pus.fns))
	for _, fn := range pus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
