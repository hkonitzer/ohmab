// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hkonitzer/ohmab/ent/business"
	"github.com/hkonitzer/ohmab/ent/predicate"
	"github.com/hkonitzer/ohmab/ent/publicuser"
	"github.com/hkonitzer/ohmab/ent/timetable"
)

// PublicUserUpdate is the builder for updating PublicUser entities.
type PublicUserUpdate struct {
	config
	hooks    []Hook
	mutation *PublicUserMutation
}

// Where appends a list predicates to the PublicUserUpdate builder.
func (puu *PublicUserUpdate) Where(ps ...predicate.PublicUser) *PublicUserUpdate {
	puu.mutation.Where(ps...)
	return puu
}

// SetSurname sets the "surname" field.
func (puu *PublicUserUpdate) SetSurname(s string) *PublicUserUpdate {
	puu.mutation.SetSurname(s)
	return puu
}

// SetFirstname sets the "firstname" field.
func (puu *PublicUserUpdate) SetFirstname(s string) *PublicUserUpdate {
	puu.mutation.SetFirstname(s)
	return puu
}

// SetTitle sets the "title" field.
func (puu *PublicUserUpdate) SetTitle(s string) *PublicUserUpdate {
	puu.mutation.SetTitle(s)
	return puu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puu *PublicUserUpdate) SetNillableTitle(s *string) *PublicUserUpdate {
	if s != nil {
		puu.SetTitle(*s)
	}
	return puu
}

// ClearTitle clears the value of the "title" field.
func (puu *PublicUserUpdate) ClearTitle() *PublicUserUpdate {
	puu.mutation.ClearTitle()
	return puu
}

// SetEmail sets the "email" field.
func (puu *PublicUserUpdate) SetEmail(s string) *PublicUserUpdate {
	puu.mutation.SetEmail(s)
	return puu
}

// AddBusinessIDs adds the "businesses" edge to the Business entity by IDs.
func (puu *PublicUserUpdate) AddBusinessIDs(ids ...uuid.UUID) *PublicUserUpdate {
	puu.mutation.AddBusinessIDs(ids...)
	return puu
}

// AddBusinesses adds the "businesses" edges to the Business entity.
func (puu *PublicUserUpdate) AddBusinesses(b ...*Business) *PublicUserUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puu.AddBusinessIDs(ids...)
}

// AddTimetableIDs adds the "timetable" edge to the Timetable entity by IDs.
func (puu *PublicUserUpdate) AddTimetableIDs(ids ...uuid.UUID) *PublicUserUpdate {
	puu.mutation.AddTimetableIDs(ids...)
	return puu
}

// AddTimetable adds the "timetable" edges to the Timetable entity.
func (puu *PublicUserUpdate) AddTimetable(t ...*Timetable) *PublicUserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puu.AddTimetableIDs(ids...)
}

// Mutation returns the PublicUserMutation object of the builder.
func (puu *PublicUserUpdate) Mutation() *PublicUserMutation {
	return puu.mutation
}

// ClearBusinesses clears all "businesses" edges to the Business entity.
func (puu *PublicUserUpdate) ClearBusinesses() *PublicUserUpdate {
	puu.mutation.ClearBusinesses()
	return puu
}

// RemoveBusinessIDs removes the "businesses" edge to Business entities by IDs.
func (puu *PublicUserUpdate) RemoveBusinessIDs(ids ...uuid.UUID) *PublicUserUpdate {
	puu.mutation.RemoveBusinessIDs(ids...)
	return puu
}

// RemoveBusinesses removes "businesses" edges to Business entities.
func (puu *PublicUserUpdate) RemoveBusinesses(b ...*Business) *PublicUserUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puu.RemoveBusinessIDs(ids...)
}

// ClearTimetable clears all "timetable" edges to the Timetable entity.
func (puu *PublicUserUpdate) ClearTimetable() *PublicUserUpdate {
	puu.mutation.ClearTimetable()
	return puu
}

// RemoveTimetableIDs removes the "timetable" edge to Timetable entities by IDs.
func (puu *PublicUserUpdate) RemoveTimetableIDs(ids ...uuid.UUID) *PublicUserUpdate {
	puu.mutation.RemoveTimetableIDs(ids...)
	return puu
}

// RemoveTimetable removes "timetable" edges to Timetable entities.
func (puu *PublicUserUpdate) RemoveTimetable(t ...*Timetable) *PublicUserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puu.RemoveTimetableIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (puu *PublicUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, puu.sqlSave, puu.mutation, puu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puu *PublicUserUpdate) SaveX(ctx context.Context) int {
	affected, err := puu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (puu *PublicUserUpdate) Exec(ctx context.Context) error {
	_, err := puu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puu *PublicUserUpdate) ExecX(ctx context.Context) {
	if err := puu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puu *PublicUserUpdate) check() error {
	if v, ok := puu.mutation.Surname(); ok {
		if err := publicuser.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "PublicUser.surname": %w`, err)}
		}
	}
	return nil
}

func (puu *PublicUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := puu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(publicuser.Table, publicuser.Columns, sqlgraph.NewFieldSpec(publicuser.FieldID, field.TypeUUID))
	if ps := puu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puu.mutation.Surname(); ok {
		_spec.SetField(publicuser.FieldSurname, field.TypeString, value)
	}
	if value, ok := puu.mutation.Firstname(); ok {
		_spec.SetField(publicuser.FieldFirstname, field.TypeString, value)
	}
	if value, ok := puu.mutation.Title(); ok {
		_spec.SetField(publicuser.FieldTitle, field.TypeString, value)
	}
	if puu.mutation.TitleCleared() {
		_spec.ClearField(publicuser.FieldTitle, field.TypeString)
	}
	if value, ok := puu.mutation.Email(); ok {
		_spec.SetField(publicuser.FieldEmail, field.TypeString, value)
	}
	if puu.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.BusinessesTable,
			Columns: publicuser.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.RemovedBusinessesIDs(); len(nodes) > 0 && !puu.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.BusinessesTable,
			Columns: publicuser.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.BusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.BusinessesTable,
			Columns: publicuser.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puu.mutation.TimetableCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.TimetableTable,
			Columns: publicuser.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.RemovedTimetableIDs(); len(nodes) > 0 && !puu.mutation.TimetableCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.TimetableTable,
			Columns: publicuser.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.TimetableIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.TimetableTable,
			Columns: publicuser.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, puu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	puu.mutation.done = true
	return n, nil
}

// PublicUserUpdateOne is the builder for updating a single PublicUser entity.
type PublicUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicUserMutation
}

// SetSurname sets the "surname" field.
func (puuo *PublicUserUpdateOne) SetSurname(s string) *PublicUserUpdateOne {
	puuo.mutation.SetSurname(s)
	return puuo
}

// SetFirstname sets the "firstname" field.
func (puuo *PublicUserUpdateOne) SetFirstname(s string) *PublicUserUpdateOne {
	puuo.mutation.SetFirstname(s)
	return puuo
}

// SetTitle sets the "title" field.
func (puuo *PublicUserUpdateOne) SetTitle(s string) *PublicUserUpdateOne {
	puuo.mutation.SetTitle(s)
	return puuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puuo *PublicUserUpdateOne) SetNillableTitle(s *string) *PublicUserUpdateOne {
	if s != nil {
		puuo.SetTitle(*s)
	}
	return puuo
}

// ClearTitle clears the value of the "title" field.
func (puuo *PublicUserUpdateOne) ClearTitle() *PublicUserUpdateOne {
	puuo.mutation.ClearTitle()
	return puuo
}

// SetEmail sets the "email" field.
func (puuo *PublicUserUpdateOne) SetEmail(s string) *PublicUserUpdateOne {
	puuo.mutation.SetEmail(s)
	return puuo
}

// AddBusinessIDs adds the "businesses" edge to the Business entity by IDs.
func (puuo *PublicUserUpdateOne) AddBusinessIDs(ids ...uuid.UUID) *PublicUserUpdateOne {
	puuo.mutation.AddBusinessIDs(ids...)
	return puuo
}

// AddBusinesses adds the "businesses" edges to the Business entity.
func (puuo *PublicUserUpdateOne) AddBusinesses(b ...*Business) *PublicUserUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puuo.AddBusinessIDs(ids...)
}

// AddTimetableIDs adds the "timetable" edge to the Timetable entity by IDs.
func (puuo *PublicUserUpdateOne) AddTimetableIDs(ids ...uuid.UUID) *PublicUserUpdateOne {
	puuo.mutation.AddTimetableIDs(ids...)
	return puuo
}

// AddTimetable adds the "timetable" edges to the Timetable entity.
func (puuo *PublicUserUpdateOne) AddTimetable(t ...*Timetable) *PublicUserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puuo.AddTimetableIDs(ids...)
}

// Mutation returns the PublicUserMutation object of the builder.
func (puuo *PublicUserUpdateOne) Mutation() *PublicUserMutation {
	return puuo.mutation
}

// ClearBusinesses clears all "businesses" edges to the Business entity.
func (puuo *PublicUserUpdateOne) ClearBusinesses() *PublicUserUpdateOne {
	puuo.mutation.ClearBusinesses()
	return puuo
}

// RemoveBusinessIDs removes the "businesses" edge to Business entities by IDs.
func (puuo *PublicUserUpdateOne) RemoveBusinessIDs(ids ...uuid.UUID) *PublicUserUpdateOne {
	puuo.mutation.RemoveBusinessIDs(ids...)
	return puuo
}

// RemoveBusinesses removes "businesses" edges to Business entities.
func (puuo *PublicUserUpdateOne) RemoveBusinesses(b ...*Business) *PublicUserUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puuo.RemoveBusinessIDs(ids...)
}

// ClearTimetable clears all "timetable" edges to the Timetable entity.
func (puuo *PublicUserUpdateOne) ClearTimetable() *PublicUserUpdateOne {
	puuo.mutation.ClearTimetable()
	return puuo
}

// RemoveTimetableIDs removes the "timetable" edge to Timetable entities by IDs.
func (puuo *PublicUserUpdateOne) RemoveTimetableIDs(ids ...uuid.UUID) *PublicUserUpdateOne {
	puuo.mutation.RemoveTimetableIDs(ids...)
	return puuo
}

// RemoveTimetable removes "timetable" edges to Timetable entities.
func (puuo *PublicUserUpdateOne) RemoveTimetable(t ...*Timetable) *PublicUserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puuo.RemoveTimetableIDs(ids...)
}

// Where appends a list predicates to the PublicUserUpdate builder.
func (puuo *PublicUserUpdateOne) Where(ps ...predicate.PublicUser) *PublicUserUpdateOne {
	puuo.mutation.Where(ps...)
	return puuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puuo *PublicUserUpdateOne) Select(field string, fields ...string) *PublicUserUpdateOne {
	puuo.fields = append([]string{field}, fields...)
	return puuo
}

// Save executes the query and returns the updated PublicUser entity.
func (puuo *PublicUserUpdateOne) Save(ctx context.Context) (*PublicUser, error) {
	return withHooks(ctx, puuo.sqlSave, puuo.mutation, puuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puuo *PublicUserUpdateOne) SaveX(ctx context.Context) *PublicUser {
	node, err := puuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puuo *PublicUserUpdateOne) Exec(ctx context.Context) error {
	_, err := puuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puuo *PublicUserUpdateOne) ExecX(ctx context.Context) {
	if err := puuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puuo *PublicUserUpdateOne) check() error {
	if v, ok := puuo.mutation.Surname(); ok {
		if err := publicuser.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "PublicUser.surname": %w`, err)}
		}
	}
	return nil
}

func (puuo *PublicUserUpdateOne) sqlSave(ctx context.Context) (_node *PublicUser, err error) {
	if err := puuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(publicuser.Table, publicuser.Columns, sqlgraph.NewFieldSpec(publicuser.FieldID, field.TypeUUID))
	id, ok := puuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicuser.FieldID)
		for _, f := range fields {
			if !publicuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puuo.mutation.Surname(); ok {
		_spec.SetField(publicuser.FieldSurname, field.TypeString, value)
	}
	if value, ok := puuo.mutation.Firstname(); ok {
		_spec.SetField(publicuser.FieldFirstname, field.TypeString, value)
	}
	if value, ok := puuo.mutation.Title(); ok {
		_spec.SetField(publicuser.FieldTitle, field.TypeString, value)
	}
	if puuo.mutation.TitleCleared() {
		_spec.ClearField(publicuser.FieldTitle, field.TypeString)
	}
	if value, ok := puuo.mutation.Email(); ok {
		_spec.SetField(publicuser.FieldEmail, field.TypeString, value)
	}
	if puuo.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.BusinessesTable,
			Columns: publicuser.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.RemovedBusinessesIDs(); len(nodes) > 0 && !puuo.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.BusinessesTable,
			Columns: publicuser.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.BusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.BusinessesTable,
			Columns: publicuser.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puuo.mutation.TimetableCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.TimetableTable,
			Columns: publicuser.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.RemovedTimetableIDs(); len(nodes) > 0 && !puuo.mutation.TimetableCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.TimetableTable,
			Columns: publicuser.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.TimetableIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   publicuser.TimetableTable,
			Columns: publicuser.TimetablePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timetable.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PublicUser{config: puuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puuo.mutation.done = true
	return _node, nil
}
