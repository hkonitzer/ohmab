// OHMAB
// Code generated by entc, DO NOT EDIT.

package timetable

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"hynie.de/ohmab/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldDeletedAt, v))
}

// DatetimeFrom applies equality check predicate on the "datetime_from" field. It's identical to DatetimeFromEQ.
func DatetimeFrom(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldDatetimeFrom, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v uint8) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldDuration, v))
}

// DatetimeTo applies equality check predicate on the "datetime_to" field. It's identical to DatetimeToEQ.
func DatetimeTo(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldDatetimeTo, v))
}

// TimeWholeDay applies equality check predicate on the "time_whole_day" field. It's identical to TimeWholeDayEQ.
func TimeWholeDay(v bool) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldTimeWholeDay, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldComment, v))
}

// AvailabilityByPhone applies equality check predicate on the "availability_by_phone" field. It's identical to AvailabilityByPhoneEQ.
func AvailabilityByPhone(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldAvailabilityByPhone, v))
}

// AvailabilityByEmail applies equality check predicate on the "availability_by_email" field. It's identical to AvailabilityByEmailEQ.
func AvailabilityByEmail(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldAvailabilityByEmail, v))
}

// AvailabilityBySms applies equality check predicate on the "availability_by_sms" field. It's identical to AvailabilityBySmsEQ.
func AvailabilityBySms(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldAvailabilityBySms, v))
}

// AvailabilityByWhatsapp applies equality check predicate on the "availability_by_whatsapp" field. It's identical to AvailabilityByWhatsappEQ.
func AvailabilityByWhatsapp(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldAvailabilityByWhatsapp, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldNotNull(FieldDeletedAt))
}

// TimetableTypeEQ applies the EQ predicate on the "timetable_type" field.
func TimetableTypeEQ(v TimetableType) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldTimetableType, v))
}

// TimetableTypeNEQ applies the NEQ predicate on the "timetable_type" field.
func TimetableTypeNEQ(v TimetableType) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldTimetableType, v))
}

// TimetableTypeIn applies the In predicate on the "timetable_type" field.
func TimetableTypeIn(vs ...TimetableType) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldTimetableType, vs...))
}

// TimetableTypeNotIn applies the NotIn predicate on the "timetable_type" field.
func TimetableTypeNotIn(vs ...TimetableType) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldTimetableType, vs...))
}

// DatetimeFromEQ applies the EQ predicate on the "datetime_from" field.
func DatetimeFromEQ(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldDatetimeFrom, v))
}

// DatetimeFromNEQ applies the NEQ predicate on the "datetime_from" field.
func DatetimeFromNEQ(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldDatetimeFrom, v))
}

// DatetimeFromIn applies the In predicate on the "datetime_from" field.
func DatetimeFromIn(vs ...time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldDatetimeFrom, vs...))
}

// DatetimeFromNotIn applies the NotIn predicate on the "datetime_from" field.
func DatetimeFromNotIn(vs ...time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldDatetimeFrom, vs...))
}

// DatetimeFromGT applies the GT predicate on the "datetime_from" field.
func DatetimeFromGT(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldDatetimeFrom, v))
}

// DatetimeFromGTE applies the GTE predicate on the "datetime_from" field.
func DatetimeFromGTE(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldDatetimeFrom, v))
}

// DatetimeFromLT applies the LT predicate on the "datetime_from" field.
func DatetimeFromLT(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldDatetimeFrom, v))
}

// DatetimeFromLTE applies the LTE predicate on the "datetime_from" field.
func DatetimeFromLTE(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldDatetimeFrom, v))
}

// DatetimeFromIsNil applies the IsNil predicate on the "datetime_from" field.
func DatetimeFromIsNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldIsNull(FieldDatetimeFrom))
}

// DatetimeFromNotNil applies the NotNil predicate on the "datetime_from" field.
func DatetimeFromNotNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldNotNull(FieldDatetimeFrom))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v uint8) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v uint8) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...uint8) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...uint8) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v uint8) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v uint8) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v uint8) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v uint8) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldNotNull(FieldDuration))
}

// DatetimeToEQ applies the EQ predicate on the "datetime_to" field.
func DatetimeToEQ(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldDatetimeTo, v))
}

// DatetimeToNEQ applies the NEQ predicate on the "datetime_to" field.
func DatetimeToNEQ(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldDatetimeTo, v))
}

// DatetimeToIn applies the In predicate on the "datetime_to" field.
func DatetimeToIn(vs ...time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldDatetimeTo, vs...))
}

// DatetimeToNotIn applies the NotIn predicate on the "datetime_to" field.
func DatetimeToNotIn(vs ...time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldDatetimeTo, vs...))
}

// DatetimeToGT applies the GT predicate on the "datetime_to" field.
func DatetimeToGT(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldDatetimeTo, v))
}

// DatetimeToGTE applies the GTE predicate on the "datetime_to" field.
func DatetimeToGTE(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldDatetimeTo, v))
}

// DatetimeToLT applies the LT predicate on the "datetime_to" field.
func DatetimeToLT(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldDatetimeTo, v))
}

// DatetimeToLTE applies the LTE predicate on the "datetime_to" field.
func DatetimeToLTE(v time.Time) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldDatetimeTo, v))
}

// TimeWholeDayEQ applies the EQ predicate on the "time_whole_day" field.
func TimeWholeDayEQ(v bool) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldTimeWholeDay, v))
}

// TimeWholeDayNEQ applies the NEQ predicate on the "time_whole_day" field.
func TimeWholeDayNEQ(v bool) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldTimeWholeDay, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldContainsFold(FieldComment, v))
}

// AvailabilityByPhoneEQ applies the EQ predicate on the "availability_by_phone" field.
func AvailabilityByPhoneEQ(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldAvailabilityByPhone, v))
}

// AvailabilityByPhoneNEQ applies the NEQ predicate on the "availability_by_phone" field.
func AvailabilityByPhoneNEQ(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldAvailabilityByPhone, v))
}

// AvailabilityByPhoneIn applies the In predicate on the "availability_by_phone" field.
func AvailabilityByPhoneIn(vs ...string) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldAvailabilityByPhone, vs...))
}

// AvailabilityByPhoneNotIn applies the NotIn predicate on the "availability_by_phone" field.
func AvailabilityByPhoneNotIn(vs ...string) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldAvailabilityByPhone, vs...))
}

// AvailabilityByPhoneGT applies the GT predicate on the "availability_by_phone" field.
func AvailabilityByPhoneGT(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldAvailabilityByPhone, v))
}

// AvailabilityByPhoneGTE applies the GTE predicate on the "availability_by_phone" field.
func AvailabilityByPhoneGTE(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldAvailabilityByPhone, v))
}

// AvailabilityByPhoneLT applies the LT predicate on the "availability_by_phone" field.
func AvailabilityByPhoneLT(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldAvailabilityByPhone, v))
}

// AvailabilityByPhoneLTE applies the LTE predicate on the "availability_by_phone" field.
func AvailabilityByPhoneLTE(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldAvailabilityByPhone, v))
}

// AvailabilityByPhoneContains applies the Contains predicate on the "availability_by_phone" field.
func AvailabilityByPhoneContains(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldContains(FieldAvailabilityByPhone, v))
}

// AvailabilityByPhoneHasPrefix applies the HasPrefix predicate on the "availability_by_phone" field.
func AvailabilityByPhoneHasPrefix(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldHasPrefix(FieldAvailabilityByPhone, v))
}

// AvailabilityByPhoneHasSuffix applies the HasSuffix predicate on the "availability_by_phone" field.
func AvailabilityByPhoneHasSuffix(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldHasSuffix(FieldAvailabilityByPhone, v))
}

// AvailabilityByPhoneIsNil applies the IsNil predicate on the "availability_by_phone" field.
func AvailabilityByPhoneIsNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldIsNull(FieldAvailabilityByPhone))
}

// AvailabilityByPhoneNotNil applies the NotNil predicate on the "availability_by_phone" field.
func AvailabilityByPhoneNotNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldNotNull(FieldAvailabilityByPhone))
}

// AvailabilityByPhoneEqualFold applies the EqualFold predicate on the "availability_by_phone" field.
func AvailabilityByPhoneEqualFold(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEqualFold(FieldAvailabilityByPhone, v))
}

// AvailabilityByPhoneContainsFold applies the ContainsFold predicate on the "availability_by_phone" field.
func AvailabilityByPhoneContainsFold(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldContainsFold(FieldAvailabilityByPhone, v))
}

// AvailabilityByEmailEQ applies the EQ predicate on the "availability_by_email" field.
func AvailabilityByEmailEQ(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldAvailabilityByEmail, v))
}

// AvailabilityByEmailNEQ applies the NEQ predicate on the "availability_by_email" field.
func AvailabilityByEmailNEQ(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldAvailabilityByEmail, v))
}

// AvailabilityByEmailIn applies the In predicate on the "availability_by_email" field.
func AvailabilityByEmailIn(vs ...string) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldAvailabilityByEmail, vs...))
}

// AvailabilityByEmailNotIn applies the NotIn predicate on the "availability_by_email" field.
func AvailabilityByEmailNotIn(vs ...string) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldAvailabilityByEmail, vs...))
}

// AvailabilityByEmailGT applies the GT predicate on the "availability_by_email" field.
func AvailabilityByEmailGT(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldAvailabilityByEmail, v))
}

// AvailabilityByEmailGTE applies the GTE predicate on the "availability_by_email" field.
func AvailabilityByEmailGTE(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldAvailabilityByEmail, v))
}

// AvailabilityByEmailLT applies the LT predicate on the "availability_by_email" field.
func AvailabilityByEmailLT(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldAvailabilityByEmail, v))
}

// AvailabilityByEmailLTE applies the LTE predicate on the "availability_by_email" field.
func AvailabilityByEmailLTE(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldAvailabilityByEmail, v))
}

// AvailabilityByEmailContains applies the Contains predicate on the "availability_by_email" field.
func AvailabilityByEmailContains(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldContains(FieldAvailabilityByEmail, v))
}

// AvailabilityByEmailHasPrefix applies the HasPrefix predicate on the "availability_by_email" field.
func AvailabilityByEmailHasPrefix(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldHasPrefix(FieldAvailabilityByEmail, v))
}

// AvailabilityByEmailHasSuffix applies the HasSuffix predicate on the "availability_by_email" field.
func AvailabilityByEmailHasSuffix(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldHasSuffix(FieldAvailabilityByEmail, v))
}

// AvailabilityByEmailIsNil applies the IsNil predicate on the "availability_by_email" field.
func AvailabilityByEmailIsNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldIsNull(FieldAvailabilityByEmail))
}

// AvailabilityByEmailNotNil applies the NotNil predicate on the "availability_by_email" field.
func AvailabilityByEmailNotNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldNotNull(FieldAvailabilityByEmail))
}

// AvailabilityByEmailEqualFold applies the EqualFold predicate on the "availability_by_email" field.
func AvailabilityByEmailEqualFold(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEqualFold(FieldAvailabilityByEmail, v))
}

// AvailabilityByEmailContainsFold applies the ContainsFold predicate on the "availability_by_email" field.
func AvailabilityByEmailContainsFold(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldContainsFold(FieldAvailabilityByEmail, v))
}

// AvailabilityBySmsEQ applies the EQ predicate on the "availability_by_sms" field.
func AvailabilityBySmsEQ(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldAvailabilityBySms, v))
}

// AvailabilityBySmsNEQ applies the NEQ predicate on the "availability_by_sms" field.
func AvailabilityBySmsNEQ(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldAvailabilityBySms, v))
}

// AvailabilityBySmsIn applies the In predicate on the "availability_by_sms" field.
func AvailabilityBySmsIn(vs ...string) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldAvailabilityBySms, vs...))
}

// AvailabilityBySmsNotIn applies the NotIn predicate on the "availability_by_sms" field.
func AvailabilityBySmsNotIn(vs ...string) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldAvailabilityBySms, vs...))
}

// AvailabilityBySmsGT applies the GT predicate on the "availability_by_sms" field.
func AvailabilityBySmsGT(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldAvailabilityBySms, v))
}

// AvailabilityBySmsGTE applies the GTE predicate on the "availability_by_sms" field.
func AvailabilityBySmsGTE(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldAvailabilityBySms, v))
}

// AvailabilityBySmsLT applies the LT predicate on the "availability_by_sms" field.
func AvailabilityBySmsLT(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldAvailabilityBySms, v))
}

// AvailabilityBySmsLTE applies the LTE predicate on the "availability_by_sms" field.
func AvailabilityBySmsLTE(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldAvailabilityBySms, v))
}

// AvailabilityBySmsContains applies the Contains predicate on the "availability_by_sms" field.
func AvailabilityBySmsContains(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldContains(FieldAvailabilityBySms, v))
}

// AvailabilityBySmsHasPrefix applies the HasPrefix predicate on the "availability_by_sms" field.
func AvailabilityBySmsHasPrefix(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldHasPrefix(FieldAvailabilityBySms, v))
}

// AvailabilityBySmsHasSuffix applies the HasSuffix predicate on the "availability_by_sms" field.
func AvailabilityBySmsHasSuffix(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldHasSuffix(FieldAvailabilityBySms, v))
}

// AvailabilityBySmsIsNil applies the IsNil predicate on the "availability_by_sms" field.
func AvailabilityBySmsIsNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldIsNull(FieldAvailabilityBySms))
}

// AvailabilityBySmsNotNil applies the NotNil predicate on the "availability_by_sms" field.
func AvailabilityBySmsNotNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldNotNull(FieldAvailabilityBySms))
}

// AvailabilityBySmsEqualFold applies the EqualFold predicate on the "availability_by_sms" field.
func AvailabilityBySmsEqualFold(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEqualFold(FieldAvailabilityBySms, v))
}

// AvailabilityBySmsContainsFold applies the ContainsFold predicate on the "availability_by_sms" field.
func AvailabilityBySmsContainsFold(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldContainsFold(FieldAvailabilityBySms, v))
}

// AvailabilityByWhatsappEQ applies the EQ predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappEQ(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEQ(FieldAvailabilityByWhatsapp, v))
}

// AvailabilityByWhatsappNEQ applies the NEQ predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappNEQ(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldNEQ(FieldAvailabilityByWhatsapp, v))
}

// AvailabilityByWhatsappIn applies the In predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappIn(vs ...string) predicate.Timetable {
	return predicate.Timetable(sql.FieldIn(FieldAvailabilityByWhatsapp, vs...))
}

// AvailabilityByWhatsappNotIn applies the NotIn predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappNotIn(vs ...string) predicate.Timetable {
	return predicate.Timetable(sql.FieldNotIn(FieldAvailabilityByWhatsapp, vs...))
}

// AvailabilityByWhatsappGT applies the GT predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappGT(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldGT(FieldAvailabilityByWhatsapp, v))
}

// AvailabilityByWhatsappGTE applies the GTE predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappGTE(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldGTE(FieldAvailabilityByWhatsapp, v))
}

// AvailabilityByWhatsappLT applies the LT predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappLT(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldLT(FieldAvailabilityByWhatsapp, v))
}

// AvailabilityByWhatsappLTE applies the LTE predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappLTE(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldLTE(FieldAvailabilityByWhatsapp, v))
}

// AvailabilityByWhatsappContains applies the Contains predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappContains(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldContains(FieldAvailabilityByWhatsapp, v))
}

// AvailabilityByWhatsappHasPrefix applies the HasPrefix predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappHasPrefix(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldHasPrefix(FieldAvailabilityByWhatsapp, v))
}

// AvailabilityByWhatsappHasSuffix applies the HasSuffix predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappHasSuffix(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldHasSuffix(FieldAvailabilityByWhatsapp, v))
}

// AvailabilityByWhatsappIsNil applies the IsNil predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappIsNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldIsNull(FieldAvailabilityByWhatsapp))
}

// AvailabilityByWhatsappNotNil applies the NotNil predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappNotNil() predicate.Timetable {
	return predicate.Timetable(sql.FieldNotNull(FieldAvailabilityByWhatsapp))
}

// AvailabilityByWhatsappEqualFold applies the EqualFold predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappEqualFold(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldEqualFold(FieldAvailabilityByWhatsapp, v))
}

// AvailabilityByWhatsappContainsFold applies the ContainsFold predicate on the "availability_by_whatsapp" field.
func AvailabilityByWhatsappContainsFold(v string) predicate.Timetable {
	return predicate.Timetable(sql.FieldContainsFold(FieldAvailabilityByWhatsapp, v))
}

// HasAddress applies the HasEdge predicate on the "address" edge.
func HasAddress() predicate.Timetable {
	return predicate.Timetable(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AddressTable, AddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressWith applies the HasEdge predicate on the "address" edge with a given conditions (other predicates).
func HasAddressWith(preds ...predicate.Address) predicate.Timetable {
	return predicate.Timetable(func(s *sql.Selector) {
		step := newAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsersOnDuty applies the HasEdge predicate on the "users_on_duty" edge.
func HasUsersOnDuty() predicate.Timetable {
	return predicate.Timetable(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersOnDutyTable, UsersOnDutyPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersOnDutyWith applies the HasEdge predicate on the "users_on_duty" edge with a given conditions (other predicates).
func HasUsersOnDutyWith(preds ...predicate.User) predicate.Timetable {
	return predicate.Timetable(func(s *sql.Selector) {
		step := newUsersOnDutyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Timetable) predicate.Timetable {
	return predicate.Timetable(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Timetable) predicate.Timetable {
	return predicate.Timetable(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Timetable) predicate.Timetable {
	return predicate.Timetable(func(s *sql.Selector) {
		p(s.Not())
	})
}
