// OHMAB
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hkonitzer/ohmab/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Set to 1 if this record should be visible in the public api
	UsePublicapi string `json:"-"`
	// Login holds the value of the "login" field.
	Login string `json:"-"`
	// The surname of a user
	Surname string `json:"surname,omitempty"`
	// The first name of a user
	Firstname string `json:"firstname,omitempty"`
	// The title of a user like PhD
	Title string `json:"title,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// The password hash of a user
	Passwordhash string `json:"-"`
	// A comment for this user
	Comment string `json:"comment,omitempty"`
	// Is the user active?
	Active bool `json:"active,omitempty"`
	// The role of the user
	Role string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// The businesses this user is associated with
	Businesses []*Business `json:"businesses,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// The persons on duty for this timetable entry
	Timetable []*Timetable `json:"timetable,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedBusinesses map[string][]*Business
	namedTags       map[string][]*Tag
	namedTimetable  map[string][]*Timetable
}

// BusinessesOrErr returns the Businesses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BusinessesOrErr() ([]*Business, error) {
	if e.loadedTypes[0] {
		return e.Businesses, nil
	}
	return nil, &NotLoadedError{edge: "businesses"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// TimetableOrErr returns the Timetable value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TimetableOrErr() ([]*Timetable, error) {
	if e.loadedTypes[2] {
		return e.Timetable, nil
	}
	return nil, &NotLoadedError{edge: "timetable"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldActive:
			values[i] = new(sql.NullBool)
		case user.FieldUsePublicapi, user.FieldLogin, user.FieldSurname, user.FieldFirstname, user.FieldTitle, user.FieldEmail, user.FieldPasswordhash, user.FieldComment, user.FieldRole:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = value.Time
			}
		case user.FieldUsePublicapi:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field use_publicapi", values[i])
			} else if value.Valid {
				u.UsePublicapi = value.String
			}
		case user.FieldLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login", values[i])
			} else if value.Valid {
				u.Login = value.String
			}
		case user.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				u.Surname = value.String
			}
		case user.FieldFirstname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstname", values[i])
			} else if value.Valid {
				u.Firstname = value.String
			}
		case user.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				u.Title = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPasswordhash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passwordhash", values[i])
			} else if value.Valid {
				u.Passwordhash = value.String
			}
		case user.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				u.Comment = value.String
			}
		case user.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				u.Active = value.Bool
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryBusinesses queries the "businesses" edge of the User entity.
func (u *User) QueryBusinesses() *BusinessQuery {
	return NewUserClient(u.config).QueryBusinesses(u)
}

// QueryTags queries the "tags" edge of the User entity.
func (u *User) QueryTags() *TagQuery {
	return NewUserClient(u.config).QueryTags(u)
}

// QueryTimetable queries the "timetable" edge of the User entity.
func (u *User) QueryTimetable() *TimetableQuery {
	return NewUserClient(u.config).QueryTimetable(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(u.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("use_publicapi=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("login=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("surname=")
	builder.WriteString(u.Surname)
	builder.WriteString(", ")
	builder.WriteString("firstname=")
	builder.WriteString(u.Firstname)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(u.Title)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("passwordhash=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(u.Comment)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", u.Active))
	builder.WriteString(", ")
	builder.WriteString("role=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// NamedBusinesses returns the Businesses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedBusinesses(name string) ([]*Business, error) {
	if u.Edges.namedBusinesses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedBusinesses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedBusinesses(name string, edges ...*Business) {
	if u.Edges.namedBusinesses == nil {
		u.Edges.namedBusinesses = make(map[string][]*Business)
	}
	if len(edges) == 0 {
		u.Edges.namedBusinesses[name] = []*Business{}
	} else {
		u.Edges.namedBusinesses[name] = append(u.Edges.namedBusinesses[name], edges...)
	}
}

// NamedTags returns the Tags named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedTags(name string) ([]*Tag, error) {
	if u.Edges.namedTags == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedTags[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedTags(name string, edges ...*Tag) {
	if u.Edges.namedTags == nil {
		u.Edges.namedTags = make(map[string][]*Tag)
	}
	if len(edges) == 0 {
		u.Edges.namedTags[name] = []*Tag{}
	} else {
		u.Edges.namedTags[name] = append(u.Edges.namedTags[name], edges...)
	}
}

// NamedTimetable returns the Timetable named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedTimetable(name string) ([]*Timetable, error) {
	if u.Edges.namedTimetable == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedTimetable[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedTimetable(name string, edges ...*Timetable) {
	if u.Edges.namedTimetable == nil {
		u.Edges.namedTimetable = make(map[string][]*Timetable)
	}
	if len(edges) == 0 {
		u.Edges.namedTimetable[name] = []*Timetable{}
	} else {
		u.Edges.namedTimetable[name] = append(u.Edges.namedTimetable[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
